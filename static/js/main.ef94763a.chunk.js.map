{"version":3,"sources":["utils/Validators/validators.ts","assets/images/preloader.svg","components/common/Preloader/Preloader.tsx","redux/profile-reducer.ts","redux/dialogs-reducer.ts","api/chat-api.ts","redux/chat-reducer.ts","api/api.ts","api/security-api.ts","api/profile-api.ts","api/users-api.ts","api/auth-api.ts","reportWebVitals.js","redux/users-selectors.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/UsersSearchForm.tsx","utils/object-helpers.ts","redux/users-reducer.ts","components/Users/Users.tsx","components/Users/UsersPage.tsx","redux/auth-reducer.ts","redux/app-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","hoc/withSuspence.tsx","components/Login/Sections/LoginForm.tsx","components/Login/LoginPage.tsx","redux/auth-selectors.ts","components/Header/Header.tsx","App.tsx","index.tsx","components/common/FormsControls/FormsControls.tsx"],"names":["required","value","maxLengthCreator","maxLength","length","Preloader","src","preloader","alt","initialState","postsData","id","message","likes","profile","status","actions","addPostActionCreator","newPostText","type","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photos","getUserProfile","userId","dispatch","a","profileAPI","getProfile","data","getStatus","updateStatus","resultCode","console","log","savePhoto","file","saveProfile","getState","auth","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","newPost","filter","p","dialogsData","name","messagesData","sendMessage","newMessageBody","dialogsReducer","body","subscribers","ws","closeHandler","setTimeout","createChanel","messageHandler","e","newMessages","JSON","parse","forEach","s","removeEventListener","close","WebSocket","addEventListener","chatAPI","callback","push","send","payload","_newMessageHandler","newMessageHandlerCreator","startMessagesListening","stopMessagesListening","chatReducer","ResultCodesEnum","ResultCodeForCaptchaEnum","securityAPI","getCaptchaUrl","instance","get","then","res","put","photoFile","formData","FormData","append","headers","usersAPI","getUsers","currentPage","pageSize","term","friend","follow","post","unfollow","delete","authAPI","me","login","email","password","rememberMe","captcha","logout","axios","create","withCredentials","baseURL","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createSelector","usersPage","users","u","getPageSize","getTotalUsersCount","totalUsersCount","getCurrentPage","getIsFetching","isFetching","getFollowingInProgress","followingInProgress","getUsersFilter","Paginator","totalItemsCount","onPageChanged","x","portionSize","pagesCount","Math","ceil","pages","i","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","className","onClick","map","User","user","to","small","followed","disabled","some","usersSearchFormValidate","values","UsersSearchForm","memo","props","useSelector","enableReinitialize","initialValues","String","validate","onSubmit","setSubmitting","onFilterChanged","isSubmitting","as","updateObjectInArray","items","itemId","objPropName","newObjProps","count","requestUsers","page","response","totalCount","usersReducer","Users","useDispatch","history","useHistory","useEffect","parsed","queryString","location","search","substr","actualPage","actualFilter","Number","query","pathname","pageNumber","UsersPage","pageTitle","isAuth","captchaUrl","getAuthUserData","meData","Success","url","authReducer","initialized","appReducer","sidebar","sidebarReducer","rootReducer","combineReducers","profilePage","dialogsPage","form","formReducer","app","chat","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","withSuspense","WrappedComponent","fallback","LoginReduxForm","reduxForm","handleSubmit","error","createField","Input","undefined","LoginPage","CaptchaIsRequired","selectIsAuth","selectCurrentUserLogin","Header","Layout","span","theme","mode","Item","style","backgroundColor","icon","UserOutlined","SubMenu","Menu","Content","Footer","Sider","DialogsContainer","lazy","ProfileContainer","ChatPage","SuspendedDialogs","SuspendedProfile","SuspendedChatPage","App","catchAllUnhandledErrors","alert","this","initializeApp","padding","margin","width","defaultSelectedKeys","defaultOpenKeys","height","title","minHeight","exact","path","Component","AppContainer","withRouter","connect","SamuraiJSApp","ReactDOM","render","StrictMode","document","getElementById","FormControl","meta","touched","children","hasError","Textarea","input","restProps","placeholder","validators","component","text"],"mappings":"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","file":"static/js/main.ef94763a.chunk.js","sourcesContent":["export type FieldValidatorType = (value: string) => string | undefined;\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n};","export default __webpack_public_path__ + \"static/media/preloader.3ad5b43f.svg\";","import React, {FC} from \"react\";\r\nimport preloader from \"../../../assets/images/preloader.svg\";\r\n\r\nconst Preloader: FC = () => {\r\n    return (\r\n        <div>\r\n            <img src={preloader} alt=\"Preloader\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Preloader;","import {profileAPI} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from 'redux-form';\r\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\n\r\nlet initialState = {\r\n    postsData: [\r\n        {\r\n            id: 1,\r\n            message: \"Hi, who are u?\",\r\n            likes: 12\r\n        },\r\n        {\r\n            id: 2,\r\n            message: \"Hi, who are u Doe?\",\r\n            likes: 1\r\n        },\r\n        {\r\n            id: 3,\r\n            message: \"Hi, who are John?\",\r\n            likes: 129\r\n        }\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n};\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/PROFILE/ADD_POST\": {\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likes: 0,\r\n            };\r\n            return {\r\n                ...state,\r\n                postsData: [...state.postsData, newPost],\r\n            }\r\n        }\r\n\r\n        case \"SN/PROFILE/SET_USER_PROFILE\": {\r\n            return  {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n        }\r\n\r\n        case \"SN/PROFILE/SET_STATUS\": {\r\n            return  {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        }\r\n\r\n        case \"SN/PROFILE/DELETE_POST\": {\r\n            return  {\r\n                ...state,\r\n                postsData: state.postsData.filter(p => p.id !== action.postId)\r\n            };\r\n        }\r\n\r\n        case \"SN/PROFILE/SAVE_PHOTO_SUCCESS\": {\r\n            return  {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos} as ProfileType\r\n            };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    addPostActionCreator: (newPostText: string) => ({\r\n        type: \"SN/PROFILE/ADD_POST\",\r\n        newPostText\r\n    } as const),\r\n    setUserProfile: (profile: ProfileType) => ({\r\n        type: \"SN/PROFILE/SET_USER_PROFILE\",\r\n        profile\r\n    } as const),\r\n\r\n    setStatus: (status: string) => ({\r\n        type: \"SN/PROFILE/SET_STATUS\",\r\n        status\r\n    } as const),\r\n\r\n    deletePost: (postId: number) => ({\r\n        type: \"SN/PROFILE/DELETE_POST\",\r\n        postId\r\n    } as const),\r\n\r\n    savePhotoSuccess: (photos: PhotosType) => ({\r\n        type: \"SN/PROFILE/SAVE_PHOTO_SUCCESS\",\r\n        photos\r\n    } as const),\r\n}\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getProfile(userId);\r\n\r\n    dispatch(actions.setUserProfile(data));\r\n};\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getStatus(userId);\r\n    dispatch(actions.setStatus(data));\r\n};\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        const data = await profileAPI.updateStatus(status);\r\n        if (data.resultCode === 0) dispatch(actions.setStatus(status));\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n};\r\n\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    const data = await  profileAPI.savePhoto(file);\r\n    if (data.resultCode === 0) dispatch(actions.savePhotoSuccess(data.data.photos));\r\n};\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId;\r\n    const data = await  profileAPI.saveProfile(profile);\r\n    if (data.resultCode === 0) {\r\n        if(userId != null) {\r\n            dispatch(getUserProfile(userId));\r\n        } else {\r\n            throw new Error(\"userId can't be null\");\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0] }));\r\n        // dispatch(stopSubmit(\"edit-profile\", {\"contacts\": {\"facebook\": response.data.message[0]} }));\r\n        return Promise.reject(data.messages[0]);\r\n    }\r\n};\r\n\r\nexport default profileReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>;","import {InferActionsTypes} from \"./redux-store\";\r\n\r\ntype DialogType = {\r\n    id: number,\r\n    name: string\r\n};\r\n\r\ntype MessageType = {\r\n    id: number,\r\n    message: string\r\n}\r\n\r\nlet initialState = {\r\n    dialogsData: [\r\n        {\r\n            id: 1,\r\n            name: \"Roman\"\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Dimych\"\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Petro\"\r\n        },\r\n        {\r\n            id: 4,\r\n            name: \"Andrey\"\r\n        }\r\n    ] as Array<DialogType>,\r\n    messagesData: [\r\n        {\r\n            id: 1,\r\n            message: \"Hi world!\"\r\n        },\r\n        {\r\n            id: 2,\r\n            message: \"Hi wrld!\"\r\n        },\r\n        {\r\n            id: 3,\r\n            message: \"Yo\"\r\n        }\r\n    ] as Array<MessageType>\r\n}\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/DIALOGS/SEND_MESSAGE\": {\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messagesData: [...state.messagesData, {id: 6, message: body}],\r\n\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    sendMessage: (newMessageBody: string) => ({\r\n        type: \"SN/DIALOGS/SEND_MESSAGE\",\r\n        newMessageBody\r\n    } as const)\r\n}\r\n\r\n\r\nexport default dialogsReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\n","type SubscriberType = (messages: ChatMessageType[]) => void;\r\n\r\nexport type ChatMessageType = {\r\n    message: string,\r\n    photo: string,\r\n    userId: number,\r\n    userName: string,\r\n}\r\n\r\nlet subscribers = [] as SubscriberType[];\r\n\r\nlet ws: WebSocket | null = null;\r\n\r\nconst closeHandler = () => {\r\n    console.log('close WS');\r\n    setTimeout(createChanel, 3000);\r\n};\r\n\r\nconst messageHandler = (e: MessageEvent) => {\r\n    const newMessages = JSON.parse(e.data);\r\n    subscribers.forEach(s => s(newMessages));\r\n};\r\n\r\nfunction createChanel() {\r\n    ws?.removeEventListener('close' , closeHandler);\r\n    ws?.close();\r\n\r\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx');\r\n    ws.addEventListener('close', closeHandler);\r\n    ws.addEventListener('message', messageHandler);\r\n}\r\n\r\nexport const chatAPI = {\r\n    start() {\r\n        createChanel();\r\n    },\r\n    stop() {\r\n        subscribers = [];\r\n        ws?.removeEventListener('close', closeHandler);\r\n        ws?.removeEventListener('message', messageHandler);\r\n        ws?.close();\r\n    },\r\n    subscribe(callback: SubscriberType) {\r\n        subscribers.push(callback);\r\n\r\n        return () => {\r\n            subscribers = subscribers.filter(s => s!== callback);\r\n        };\r\n    },\r\n    unsubscribe(callback: SubscriberType) {\r\n        return () => {\r\n            subscribers = subscribers.filter(s => s!== callback);\r\n        };\r\n    },\r\n    sendMessage(message: string) {\r\n        ws?.send(message);\r\n    },\r\n\r\n}","import {chatAPI, ChatMessageType} from \"../api/chat-api\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {FormAction} from \"redux-form\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nlet initialState = {\r\n    messages: [] as ChatMessageType[],\r\n}\r\n\r\nconst chatReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/CHAT/MESSAGES_RECEIVED\":\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, ...action.payload.messages],\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    messagesReceived: (messages: ChatMessageType[]) => ({\r\n        type: \"SN/CHAT/MESSAGES_RECEIVED\",\r\n        payload: { messages }\r\n    } as const),\r\n}\r\n\r\nlet _newMessageHandler: ((messages: ChatMessageType[]) => void) | null = null;\r\n\r\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\r\n    if(_newMessageHandler === null) {\r\n        _newMessageHandler = (messages) => {\r\n            dispatch(actions.messagesReceived(messages));\r\n        };\r\n    }\r\n\r\n    return _newMessageHandler;\r\n};\r\n\r\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.start();\r\n    chatAPI.subscribe(newMessageHandlerCreator(dispatch));\r\n};\r\n\r\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.unsubscribe(newMessageHandlerCreator(dispatch));\r\n    chatAPI.stop();\r\n};\r\n\r\nexport const sendMessage = (message: string): ThunkType => async (dispatch) => {\r\n    chatAPI.sendMessage(message);\r\n};\r\n\r\nexport default chatReducer;\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>;","import axios from \"axios\";\r\nimport {securityAPI} from \"./security-api\";\r\nimport {profileAPI} from \"./profile-api\";\r\nimport {usersAPI} from \"./users-api\";\r\nimport {authAPI} from \"./auth-api\";\r\nimport {UserType} from \"../types/types\";\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"c4158ed8-d0fa-48f5-978e-b07ad1bf0132\"\r\n    }\r\n});\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport enum ResultCodeForCaptchaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport {\r\n    securityAPI,\r\n    profileAPI,\r\n    usersAPI,\r\n    authAPI,\r\n}","import {instance} from \"./api\";\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`);\r\n    }\r\n};","import {PhotosType, ProfileType} from \"../types/types\";\r\nimport {instance, APIResponseType} from \"./api\";\r\n\r\ntype SavePhotosResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/${userId}`).then(res => res.data);\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/${userId}`).then(res => res.data);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status/`, {status}).then(res => res.data);\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile);\r\n        return instance.put<APIResponseType<SavePhotosResponseDataType>>(`profile/status/`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data);\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data);\r\n    }\r\n};","import { GetItemsType, instance, APIResponseType } from \"./api\";\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10, term: string = '', friend:null | boolean = null) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`)).then(res => res.data);\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data);\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>;\r\n    }\r\n};","import {instance, APIResponseType, ResultCodesEnum, ResultCodeForCaptchaEnum} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number,\r\n    email: string,\r\n    login: string\r\n}\r\n\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data);\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodeForCaptchaEnum | ResultCodesEnum>>(`auth/login`, {email, password, rememberMe, captcha})\r\n            .then(res => res.data);\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    }\r\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createSelector } from \"reselect\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nexport const getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users.filter(u => true);\r\n};\r\n\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n    return users.filter(u => true);\r\n});\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n};\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n};\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n};\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n};\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n};\r\n\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter;\r\n};","import React, { useState, FC } from \"react\";\r\nimport \"./Paginator.css\";\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number,\r\n    currentPage?: number,\r\n    onPageChanged?: (pageNumber: number) => void,\r\n    pageSize: number,\r\n    portionSize?: number\r\n}\r\n\r\nconst Paginator: FC<PropsType> = ({\r\n          totalItemsCount,\r\n          currentPage = 1,\r\n          onPageChanged = x => x,\r\n          pageSize,\r\n          portionSize = 10\r\n}) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages: Array<number> = [];\r\n\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return (\r\n        <div className=\"paginator\">\r\n            {portionNumber > 1 &&\r\n                <button onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</button>}\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map((p) => (\r\n                    <span className={`${(currentPage === p ?\"user__page-select\": \"\")} user__page-number`}\r\n                          key={p}\r\n                          onClick={() => { onPageChanged(p) }}>{p}</span>\r\n                ))\r\n            }\r\n            {portionCount > portionNumber &&\r\n            <button onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</button>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Paginator;","import React, {FC} from \"react\";\r\nimport \"./users.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport { UserType } from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\n\r\nconst User: FC<PropsType> = ({user, followingInProgress, unfollow, follow}) => {\r\n    return (\r\n            <div className=\"user\">\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={\"/profile/\" + user.id}>\r\n                            <img className=\"user__avatar\" src={`${user.photos.small != null ? user.photos.small : \"https://images.pexels.com/photos/1312023/pexels-photo-1312023.jpeg?cs=srgb&dl=pexels-michael-morse-1312023.jpg&fm=jpg\"}`} alt=\"\"/>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        { user.followed\r\n                            ? <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                      onClick={ () => { unfollow(user.id); }}>UnFollow</button>\r\n                            :  <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                       onClick={ () => { follow(user.id); }}>Follow</button>}\r\n                    </div>\r\n                </span>\r\n                <span>\r\n                    <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{user.id}</div>\r\n                        <div>{`user.location.country`}</div>\r\n                        <div>{`user.location.city`}</div>\r\n                    </span>\r\n                </span>\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default User;","import React, {FC, memo} from \"react\";\r\nimport {Field, Form, Formik} from \"formik\";\r\nimport {FilterType} from \"../../redux/users-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getUsersFilter} from \"../../redux/users-selectors\";\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n    const errors = {};\r\n    return errors;\r\n};\r\n\r\ntype FriendFormType = 'true' | 'false' | 'null';\r\n\r\ntype FormType = {\r\n    term: string,\r\n    friend: FriendFormType\r\n}\r\n\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void,\r\n};\r\n\r\nconst UsersSearchForm: FC<PropsType> = memo ((props) => {\r\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void } ) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\r\n        }\r\n        props.onFilterChanged(filter);\r\n        setSubmitting(false);\r\n    };\r\n\r\n    const filter = useSelector(getUsersFilter);\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                enableReinitialize\r\n                initialValues={{ term: filter.term, friend: String(filter.friend) as FriendFormType }}\r\n                validate={usersSearchFormValidate}\r\n                onSubmit={submit}\r\n            >\r\n                {({isSubmitting}) => (\r\n                    <Form>\r\n                        <Field name=\"term\" type=\"text\" />\r\n                        <Field name=\"friend\" as=\"select\">\r\n                            <option value=\"null\">All</option>\r\n                            <option value=\"true\">Only followed</option>\r\n                            <option value=\"false\">Only unfollowed</option>\r\n                        </Field>\r\n                        <button type=\"submit\" disabled={isSubmitting}>Find</button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default UsersSearchForm;","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n    return items.map((user: any) => {\r\n        if (user[objPropName] === itemId.userId) {\r\n            return {...user, ...newObjProps}\r\n        }\r\n        return user;\r\n    })\r\n};","import {APIResponseType, usersAPI} from \"../api/api\";\r\nimport {updateObjectInArray} from \"../utils/object-helpers\";\r\nimport {UserType} from \"../types/types\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>, // array of users ids\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialState => {\r\n    switch (action.type) {\r\n        case \"SN/USERS/FOLLOW\": {\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {follow: true} )\r\n                // users: state.users.map( user => {\r\n                //     if (user.id === action.userId) {\r\n                //         return {\r\n                //             ...user,\r\n                //             followed: true\r\n                //         }\r\n                //     }\r\n                //     return user;\r\n                // }),\r\n            }\r\n        }\r\n\r\n        case \"SN/USERS/UNFOLLOW\": {\r\n            return  {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {follow: false} )\r\n            };\r\n        }\r\n\r\n        case \"SN/USERS/SET_USERS\": {\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        }\r\n\r\n        case \"SN/USERS/SET_CURRENT_PAGE\": {\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        }\r\n\r\n        case \"SN/USERS/SET_TOTAL_USERS_COUNT\": {\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.count\r\n            }\r\n        }\r\n\r\n        case \"SN/USERS/TOGGLE_IS_FETCHING\": {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        }\r\n        case \"SN/USERS/SET_FILTER\": {\r\n            return {...state, filter: action.payload}\r\n        }\r\n        case \"SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS\": {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({\r\n        type: \"SN/USERS/FOLLOW\",\r\n        userId\r\n    } as const),\r\n\r\n    unfollowSuccess: (userId: number) => ({\r\n        type: \"SN/USERS/UNFOLLOW\",\r\n        userId\r\n    } as const),\r\n\r\n    setUsers: (users: Array<UserType>) => ({\r\n        type: \"SN/USERS/SET_USERS\",\r\n        users\r\n    } as const),\r\n\r\n    setCurrentPage: (currentPage: number) => ({\r\n        type: \"SN/USERS/SET_CURRENT_PAGE\",\r\n        currentPage\r\n    } as const),\r\n\r\n    setFilter: (filter: FilterType) => ({\r\n        type: \"SN/USERS/SET_FILTER\",\r\n        payload: filter\r\n    } as const),\r\n\r\n    setTotalUsersCount: (totalUsersCount: number) => ({\r\n        type: \"SN/USERS/SET_TOTAL_USERS_COUNT\",\r\n        count: totalUsersCount\r\n    } as const),\r\n\r\n    toggleIsFetching: (isFetching: boolean) => ({\r\n        type: \"SN/USERS/TOGGLE_IS_FETCHING\",\r\n        isFetching\r\n    } as const),\r\n\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\r\n        type: \"SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS\",\r\n        isFetching,\r\n        userId\r\n    } as const),\r\n};\r\n\r\n\r\nexport const requestUsers =\r\n    (page: number, pageSize: number, filter: FilterType): ThunkType =>\r\n    async (dispatch) => {\r\n    dispatch(actions.toggleIsFetching(true));\r\n    dispatch(actions.setCurrentPage(page));\r\n    dispatch(actions.setFilter(filter));\r\n\r\n    let response = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend);\r\n\r\n    dispatch(actions.toggleIsFetching(false));\r\n    dispatch(actions.setUsers(response.items));\r\n    dispatch(actions.setTotalUsersCount(response.totalCount));\r\n};\r\n\r\nconst _followUnfollowFlow = async (\r\n    dispatch: Dispatch<ActionsTypes>, userId: number, apiMethod: (userId: number) => Promise<APIResponseType>,\r\n    actionCreator: (userId: number) => ActionsTypes) => {\r\n\r\n    dispatch(actions.toggleFollowingProgress(true, userId));\r\n    let response = await apiMethod(userId);\r\n\r\n    if (response.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(actions.toggleFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => async (dispatch) => {\r\n    await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess);\r\n};\r\n\r\nexport const unfollow = (userId: number): ThunkType => async (dispatch) => {\r\n    await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess);\r\n};\r\n\r\nexport default usersReducer;\r\n\r\nexport type InitialState = typeof initialState;\r\nexport type FilterType = typeof initialState.filter;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsTypes>;","import React, { FC, useEffect } from \"react\";\r\nimport \"./users.css\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\nimport UsersSearchForm from \"./UsersSearchForm\";\r\nimport {FilterType, requestUsers} from \"../../redux/users-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getUsersFilter\r\n} from \"../../redux/users-selectors\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport * as queryString from 'querystring';\r\n\r\ntype QueryParamsType = {term?: string; page?: string; friend?: string;}\r\n\r\nexport const Users: FC = () => {\r\n\r\n    const users = useSelector(getUsers);\r\n    const totalUsersCount = useSelector(getTotalUsersCount);\r\n    const currentPage = useSelector(getCurrentPage);\r\n    const pageSize = useSelector(getPageSize);\r\n    const filter = useSelector(getUsersFilter);\r\n    const followingInProgress = useSelector(getFollowingInProgress);\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(requestUsers(pageNumber, pageSize, filter));\r\n    };\r\n\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter));\r\n    };\r\n\r\n    const follow = (userId: number) => {\r\n        dispatch(follow(userId));\r\n    };\r\n    const unfollow = (userId: number) => {\r\n        dispatch(unfollow(userId));\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType;\r\n\r\n        let actualPage = currentPage;\r\n        let actualFilter = filter;\r\n\r\n        if(!!parsed.page) actualPage = Number(parsed.page);\r\n        if(!!parsed.page) actualFilter = {...actualFilter, term: parsed.term as string};\r\n\r\n        switch (parsed.friend) {\r\n            case 'null':\r\n                actualFilter = {...actualFilter, friend: null};\r\n                break;\r\n            case 'true':\r\n                actualFilter = {...actualFilter, friend: true};\r\n                break;\r\n            case 'false':\r\n                actualFilter = {...actualFilter, friend: false};\r\n                break;\r\n        }\r\n\r\n        dispatch(requestUsers(actualPage, pageSize, actualFilter));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const query: QueryParamsType = {};\r\n        if(!!filter.term) query.term = filter.term;\r\n        if(filter.friend !== null) query.friend = String(filter.friend);\r\n        if(currentPage !== 1) query.page = String(currentPage);\r\n\r\n        history.push({\r\n            pathname: '/developers',\r\n            search: queryString.stringify(query)\r\n        })\r\n    }, [filter, currentPage]);\r\n\r\n    return (\r\n        <div>\r\n            <UsersSearchForm onFilterChanged={onFilterChanged} />\r\n            <Paginator currentPage={currentPage}\r\n                       onPageChanged={onPageChanged}\r\n                       totalItemsCount={totalUsersCount}\r\n                       pageSize={pageSize}/>\r\n            <div>\r\n                {users.map(user => (\r\n                    <User user={user}\r\n                         followingInProgress={followingInProgress}\r\n                         follow={follow}\r\n                         unfollow={unfollow}\r\n                         key={user.id}\r\n                     />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React, { FC } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport { getIsFetching, } from \"../../redux/users-selectors\";\r\nimport { Users } from \"./Users\";\r\n\r\ntype UsersPagePropsType = {\r\n    pageTitle: string,\r\n};\r\n\r\nconst UsersPage: FC<UsersPagePropsType> = (props) => {\r\n    const isFetching = useSelector(getIsFetching);\r\n\r\n    return (\r\n        <>\r\n            <h2>{props.pageTitle}</h2>\r\n            {isFetching ? <Preloader /> : null}\r\n            <Users />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default UsersPage;","import {authAPI, ResultCodeForCaptchaEnum, ResultCodesEnum, securityAPI} from '../api/api';\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\n\r\nlet initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null // if null , then captcha is not required\r\n};\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n\r\n        case \"SN/auth/SET_USER_DATA\":\r\n        case \"SN/auth/GET_CAPTCHA_URL_SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth:boolean) => ({\r\n        type: \"SN/auth/SET_USER_DATA\",\r\n        payload: { userId,  email,  login,  isAuth }\r\n    } as const),\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\r\n        type: \"SN/auth/GET_CAPTCHA_URL_SUCCESS\",\r\n        payload: {captchaUrl}\r\n    } as const),\r\n}\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    let meData = await authAPI.me();\r\n\r\n    if(meData.resultCode === ResultCodesEnum.Success) {\r\n        let {id, email, login} = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true));\r\n    }\r\n};\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n    let data = await authAPI.login(email, password, rememberMe, captcha);\r\n\r\n    if(data.resultCode === ResultCodesEnum.Success) {\r\n        // success , get auth data\r\n        dispatch(getAuthUserData())\r\n    }  else {\r\n        if (data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl())\r\n        }\r\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n};\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    const data = await securityAPI.getCaptchaUrl();\r\n    const captchaUrl = data.data.url;\r\n\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl));\r\n};\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    let response = await authAPI.logout();\r\n\r\n    if(response.data.resultCode === 0 ) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false));\r\n    }\r\n};\r\n\r\nexport default authReducer;\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>;","import {getAuthUserData} from \"./auth-reducer\";\r\nimport {InferActionsTypes} from \"./redux-store\";\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case \"SN/APP/INITIALIZED_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: \"SN/APP/INITIALIZED_SUCCESS\"} as const)\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n\r\n    /*когда купишь апи встатвить код\r\n    *  promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccess());\r\n        });\r\n    * */\r\n\r\n    promise.then(() => {\r\n        dispatch(actions.initializedSuccess());\r\n    });\r\n};\r\n\r\nexport default appReducer;","let initialState = {\r\n    sidebar: {},\r\n}\r\ntype InitialState = typeof initialState;\r\n\r\nconst sidebarReducer = (state = initialState, action: any): InitialState => {\r\n\r\n    return state;\r\n};\r\n\r\nexport default sidebarReducer;","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\nimport appReducer from \"./app-reducer\";\r\nimport chatReducer from \"./chat-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth : authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n    chat: chatReducer\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;\r\n\r\nexport type AppStateType = ReturnType<RootReducerType>;\r\n\r\nexport type InferActionsTypes<T> = T extends {[key: string]: (...args: any[]) => infer U} ? U : never;\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>;\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n// @ts-ignore\r\nwindow.__store__ = store;\r\n\r\nexport default store;","import React, {ComponentType, Suspense} from \"react\";\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return (\r\n            <Suspense fallback={<h1>Loading profile...</h1>}>\r\n                <WrappedComponent {...props}/>\r\n            </Suspense>\r\n            )\r\n    }\r\n}","import React, {FC} from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeys, Input} from \"../../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../../utils/Validators/validators\";\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string\r\n}\r\n\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>;\r\n\r\nconst LoginForm: FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({handleSubmit, error, captchaUrl}) => {\r\n   return (\r\n       <form onSubmit={handleSubmit}>\r\n           {createField<LoginFormValuesTypeKeys>(\"Email\", \"email\", [required], Input)}\r\n           {createField<LoginFormValuesTypeKeys>(\"Password\", \"password\", [required], Input, {type: \"password\"})}\r\n           {createField<LoginFormValuesTypeKeys>(undefined, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"remember me\")}\r\n           {captchaUrl && <img src={captchaUrl} alt={captchaUrl} /> }\r\n           {captchaUrl && createField<LoginFormValuesTypeKeys>(\"Symbols from image\", \"captcha\", [required], Input, {}) }\r\n           { error && <div className=\"form-summary-error\">\r\n               {error}\r\n           </div>}\r\n           <div>\r\n               <button>Login</button>\r\n           </div>\r\n       </form>\r\n   )\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm);\r\n\r\n\r\nexport default LoginReduxForm;","import React, {FC} from \"react\";\r\nimport \"./login.css\";\r\nimport LoginForm from \"./Sections/LoginForm\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { login } from \"../../redux/auth-reducer\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport { LoginFormValuesType } from \"./Sections/LoginForm\";\r\n\r\nexport const LoginPage: FC = () => {\r\n    const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl);\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha));\r\n    };\r\n\r\n    if (isAuth) {\r\n        return <Redirect to=\"/profile\" />\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>login</h1>\r\n            <LoginForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\r\n        </div>\r\n    )\r\n};","import {AppStateType} from \"./redux-store\";\r\n\r\nexport const selectIsAuth = (state: AppStateType) => {\r\n    return state.auth.isAuth;\r\n};\r\n\r\nexport const selectCurrentUserLogin = (state: AppStateType) => {\r\n    return state.auth.login;\r\n};","import React, {FC} from \"react\"\r\nimport \"./header.css\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {Avatar, Button, Col, Layout, Menu, Row} from \"antd\";\r\nimport {UserOutlined} from '@ant-design/icons';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {selectCurrentUserLogin, selectIsAuth } from \"../../redux/auth-selectors\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\n\r\nexport const Header: FC = () => {\r\n\r\n    const isAuth = useSelector(selectIsAuth);\r\n    const login = useSelector(selectCurrentUserLogin);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const logoutCallback = () => {\r\n        dispatch(logout());\r\n    }\r\n\r\n    const {Header} = Layout;\r\n\r\n    return (\r\n        <Header>\r\n            <Row>\r\n                <Col span={18}>\r\n                    <Menu theme=\"dark\" mode=\"horizontal\">\r\n                        <Menu.Item key='1'>\r\n                            <Link to=\"/developers\">Developers</Link>\r\n                        </Menu.Item>\r\n                    </Menu>\r\n                </Col>\r\n                { isAuth\r\n                    ? <>\r\n                        <Col span={1}>\r\n                            <Avatar alt={login || ''} style={{ backgroundColor: '#87d068' }} icon={<UserOutlined />} />\r\n                        </Col>\r\n                        <Col span={5}>\r\n                            <Button onClick={logoutCallback}>Log out</Button>\r\n                        </Col>\r\n                    </>\r\n                    : <Col span={6}>\r\n                        <Button>\r\n                            <Link to='/login'>Login</Link>\r\n                        </Button>\r\n                    </Col>\r\n                }\r\n            </Row>\r\n        </Header>\r\n    );\r\n};","import React, {Component, ComponentType, FC, lazy} from \"react\";\r\nimport { Switch, Route, withRouter, BrowserRouter, Redirect, Link } from 'react-router-dom';\r\nimport \"./App.css\";\r\nimport \"antd/dist/antd.css\";\r\nimport UsersPage from \"./components/Users/UsersPage\";\r\nimport {compose} from \"redux\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport Preloader from \"./components/common/Preloader/Preloader\";\r\nimport store, {AppStateType} from \"./redux/redux-store\";\r\nimport {withSuspense} from \"./hoc/withSuspence\";\r\nimport {LoginPage} from \"./components/Login/LoginPage\";\r\nimport {Layout, Menu, Breadcrumb} from \"antd\";\r\nimport {UserOutlined} from '@ant-design/icons';\r\nimport { Header } from \"./components/Header/Header\";\r\n\r\nconst {SubMenu} = Menu;\r\nconst {Content, Footer, Sider} = Layout;\r\n\r\nconst DialogsContainer = lazy(() => import('./components/Dialogs/dialogsContainer'));\r\nconst ProfileContainer = lazy(() => import('./components/Profile/profileContainer'));\r\nconst ChatPage = lazy(() => import('./pages/Chat/ChatPage'));\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>;\r\ntype DispatchPropsType = {\r\n    initializeApp: () => void\r\n};\r\n\r\nconst SuspendedDialogs = withSuspense(DialogsContainer);\r\nconst SuspendedProfile = withSuspense(ProfileContainer);\r\nconst SuspendedChatPage = withSuspense(ChatPage);\r\n\r\nclass App extends Component<MapPropsType & DispatchPropsType> {\r\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\r\n        alert(\"Some error occured \");\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp();\r\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n    }\r\n\r\n    render() {\r\n\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n        return (\r\n            <Layout>\r\n                <Header />\r\n                <Content style={{ padding: '0 50px' }}>\r\n                    <Breadcrumb style={{ margin: '16px 0' }}>\r\n                        <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n                        <Breadcrumb.Item>List</Breadcrumb.Item>\r\n                        <Breadcrumb.Item>App</Breadcrumb.Item>\r\n                    </Breadcrumb>\r\n                    <Layout className=\"site-layout-background\" style={{ padding: '24px 0' }}>\r\n                        <Sider className=\"site-layout-background\" width={200}>\r\n                            <Menu\r\n                                mode=\"inline\"\r\n                                defaultSelectedKeys={['1']}\r\n                                defaultOpenKeys={['sub1']}\r\n                                style={{ height: '100%'}}\r\n                            >\r\n                                <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"My Profile\">\r\n                                    <Menu.Item key='1'>\r\n                                        <Link to=\"/profile\">Profile</Link>\r\n                                    </Menu.Item>\r\n                                    <Menu.Item key='2'>\r\n                                        <Link to=\"/dialogs\">Messages</Link>\r\n                                    </Menu.Item>\r\n                                </SubMenu>\r\n                                <SubMenu key=\"sub2\" icon={<UserOutlined />} title=\"Developer\">\r\n                                    <Menu.Item key='3'>\r\n                                        <Link to=\"/developers\">Developers</Link>\r\n                                    </Menu.Item>\r\n                                </SubMenu>\r\n                                <SubMenu key=\"sub3\" icon={<UserOutlined />} title=\"Chat\">\r\n                                    <Menu.Item key='4'>\r\n                                        <Link to=\"/chat\">Chat</Link>\r\n                                    </Menu.Item>\r\n                                </SubMenu>\r\n                            </Menu>\r\n                        </Sider>\r\n                        <Content style={{ padding: '0 24px', minHeight: 280 }}>\r\n                            <Switch>\r\n                                <Route exact path=\"/\">\r\n                                    {() => <Redirect to=\"/profile\"/>}\r\n                                </Route>\r\n                                <Route path=\"/dialogs\">\r\n                                    <SuspendedDialogs/>\r\n                                </Route>\r\n                                <Route path=\"/profile/:userId?\">\r\n                                    <SuspendedProfile/>\r\n                                </Route>\r\n                                <Route path=\"/developers\">\r\n                                    <UsersPage pageTitle=\"Page Title\"/>\r\n                                </Route>\r\n                                <Route path=\"/login\">\r\n                                    <LoginPage/>\r\n                                </Route>\r\n                                <Route path=\"/chat\">\r\n                                    <SuspendedChatPage />\r\n                                </Route>\r\n                                <Route path=\"*\">\r\n                                    <div>404 NOT FOUND</div>\r\n                                </Route>\r\n                            </Switch>\r\n                        </Content>\r\n                    </Layout>\r\n                </Content>\r\n                <Footer>Samurai Social Network @2021 Create by Inferno</Footer>\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    initialized: state.app.initialized\r\n});\r\n\r\nconst AppContainer = compose<ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp}))(App);\r\n\r\nconst SamuraiJSApp: FC = () => {\r\n    return <BrowserRouter>\r\n        <Provider store={store}>\r\n            <AppContainer/>\r\n        </Provider>\r\n    </BrowserRouter>\r\n};\r\n\r\nexport default SamuraiJSApp;","import reportWebVitals from './reportWebVitals';\nimport ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport SamuraiJSApp from \"./App\";\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <SamuraiJSApp/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React, {FC} from \"react\";\r\nimport \"./FormsControls.css\";\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport {FieldValidatorType} from \"../../../utils/Validators/validators\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={`form-control ${hasError ? \"error\" : \"\"}`}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <div>\r\n                {hasError && <span>{error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: FC<WrappedFieldProps> = (props) => {\r\n    // const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return (\r\n        <FormControl {...props}>\r\n            <textarea {...input} {...restProps} />\r\n        </FormControl>\r\n    )\r\n};\r\n\r\nexport const Input: FC<WrappedFieldProps> = (props) => {\r\n    // const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return (\r\n        <FormControl {...props}>\r\n            <input {...input} {...restProps} />\r\n        </FormControl>\r\n    )\r\n};\r\n\r\nexport function createField<FormKeysType extends string>(\r\n        placeholder: string | undefined,\r\n        name: FormKeysType,\r\n        validators: Array<FieldValidatorType>,\r\n        component: FC<WrappedFieldProps>,\r\n        props = {},\r\n        text = \"\"\r\n    ){\r\n        return (\r\n            <div>\r\n                <Field placeholder={placeholder}\r\n                       name={name}\r\n                       validate={validators}\r\n                       component={component}\r\n                       {...props}/>{text}\r\n            </div>\r\n        )\r\n    }\r\n\r\nexport type GetStringKeys<T> =  Extract<keyof T, string>;"],"sourceRoot":""}