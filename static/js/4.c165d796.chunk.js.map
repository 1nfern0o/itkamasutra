{"version":3,"sources":["components/Dialogs/Sections/DialogItem/dialogItem.tsx","components/Dialogs/Sections/Message/message.tsx","components/Dialogs/Sections/AddPostForm/AddDialogForm.tsx","components/Dialogs/dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/dialogsContainer.tsx"],"names":["DialogItem","props","className","to","id","name","MessageItem","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","createField","required","Textarea","Dialogs","state","dialogsPage","dialogsElements","dialogsData","map","dialog","messageElements","messagesData","values","sendMessage","newPostText","mapStateToPropsForRedirect","isAuth","auth","compose","connect","actions","WrappedComponent","restProps"],"mappings":"+OAiBeA,EARmB,SAACC,GAC/B,OACI,qBAAKC,UAAU,gBAAf,SACI,eAAC,IAAD,CAASC,GAAE,kBAAaF,EAAMG,IAA9B,UAAqCH,EAAMI,KAA3C,UCGGC,G,OARoB,SAACL,GAChC,OACI,qBAAKC,UAAU,iBAAf,SACI,+BAAOD,EAAMM,c,yBCJnBC,EAAcC,YAAiB,IAoBtBC,cAAoC,CAACC,KAAM,wBAA3CD,EAf+E,SAACT,GAC3F,OACI,uBAAMW,SAAUX,EAAMY,aAAtB,UACI,8BACKC,YAA0C,qBAAsB,cAAe,CAACC,IAAUP,GAAcQ,OAE7G,8BACI,kDCuBDC,EA1BmB,SAAChB,GAE/B,IAAIiB,EAAQjB,EAAMkB,YAEdC,EAAkBF,EAAMG,YAAYC,KAAI,SAAAC,GAAM,OAAI,cAAC,EAAD,CAAYlB,KAAMkB,EAAOlB,KAAsBD,GAAImB,EAAOnB,IAAtBmB,EAAOnB,OAC7FoB,EAAkBN,EAAMO,aAAaH,KAAI,SAAAf,GAAO,OAAI,cAAC,EAAD,CAAaA,QAASA,EAAQA,SAAcA,EAAQH,OAM5G,OACI,sBAAKF,UAAU,UAAf,UACI,qBAAKA,UAAU,iBAAf,SACMkB,IAEN,sBAAKlB,UAAU,WAAf,UACI,8BAAOsB,IACP,cAAC,EAAD,CAAoBZ,SAXZ,SAACc,GACjBzB,EAAM0B,YAAYD,EAAOE,uB,qCClB7BC,EAA6B,SAACX,GAAD,MAA0B,CACvDY,OAAQZ,EAAMa,KAAKD,S,YCSRE,sBACXC,aAPkB,SAACf,GACnB,MAAO,CACHC,YAAaD,EAAMC,eAKhB,eAAsBe,ODF1B,SAA+BC,GAclC,OAJqCF,YACjCJ,EADiCI,EAT2B,SAAChC,GAC9BA,EAAxB6B,OAAP,IAAkBM,EAAlB,YAA+BnC,EAA/B,GAEA,OAAKA,EAAM6B,OAGJ,cAACK,EAAD,eAAsBC,IAHH,cAAC,IAAD,CAAUjC,GAAG,gBCHhC6B,CAGbf","file":"static/js/4.c165d796.chunk.js","sourcesContent":["import React, {FC} from \"react\";\r\nimport \"./dialogItem.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    id: number,\r\n    name: string\r\n};\r\n\r\nconst DialogItem: FC<PropsType> = (props) => {\r\n    return (\r\n        <div className=\"dialogs__item\">\r\n            <NavLink to={`dialogs/${props.id}`}>{props.name} </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React, {FC} from \"react\";\r\nimport \"./message.css\";\r\n\r\ntype PropsType = {\r\n    message: string\r\n};\r\n\r\nconst MessageItem: FC<PropsType> = (props) => {\r\n    return (\r\n        <div className=\"messages__item\">\r\n            <span>{props.message}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MessageItem;","import React, {FC} from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeys, Textarea} from '../../../common/FormsControls/FormsControls';\r\nimport {maxLengthCreator, required} from \"../../../../utils/Validators/validators\";\r\nimport {NewMessageFormValuesType} from \"../../dialogs\";\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\ntype NewMessageFormValuesTypeKeys = GetStringKeys<NewMessageFormValuesType>;\r\ntype PropsType = {};\r\n\r\nconst AddDialogForm: FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<NewMessageFormValuesTypeKeys>(\"Enter your message\", 'newPostText', [required, maxLength50], Textarea)}\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\n// TODO: Need delete ts-ignore\r\n// @ts-ignore\r\nexport default reduxForm<NewMessageFormValuesType>({form: \"dialogAddMessageForm\"})(AddDialogForm);","import React, {FC} from \"react\";\r\nimport \"./dialogs.css\";\r\nimport DialogItem from \"./Sections/DialogItem/dialogItem\";\r\nimport MessageItem from \"./Sections/Message/message\";\r\nimport AddDialogFormRedux from \"./Sections/AddPostForm/AddDialogForm\";\r\nimport { InitialStateType } from \"../../redux/dialogs-reducer\";\r\n\r\ntype OwnPropsType = {\r\n    dialogsPage: InitialStateType\r\n    sendMessage: (messageText: string) => void\r\n};\r\nexport type NewMessageFormValuesType = {\r\n    newPostText: string\r\n};\r\n\r\nconst Dialogs: FC<OwnPropsType> = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogsData.map(dialog => <DialogItem name={dialog.name} key={dialog.id} id={dialog.id} />);\r\n    let messageElements = state.messagesData.map(message => <MessageItem message={message.message} key={message.id} />);\r\n\r\n    let addNewMessage = (values: {newPostText: string}) => {\r\n        props.sendMessage(values.newPostText);\r\n    };\r\n\r\n    return (\r\n        <div className=\"dialogs\">\r\n            <div className=\"dialogs__items\">\r\n                { dialogsElements }\r\n            </div>\r\n            <div className=\"messages\">\r\n                <div>{ messageElements }</div>\r\n                <AddDialogFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Dialogs;","import React, {ComponentType, FC} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {};\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: ComponentType<WCP>) {\r\n    const RedirectComponent: FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        const {isAuth, ...restProps} = props;\r\n\r\n        if (!props.isAuth) return <Redirect to=\"/login\"/>;\r\n\r\n\r\n        return <WrappedComponent {...restProps as WCP} />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\r\n        mapStateToPropsForRedirect\r\n    )(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import { ComponentType } from \"react\";\r\nimport \"./dialogs.css\";\r\nimport {actions} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {...actions}),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}