{"version":3,"sources":["hoc/withAuthRedirect.js","components/Dialogs/Sections/DialogItem/dialogItem.jsx","components/Dialogs/Sections/Message/message.jsx","components/Dialogs/Sections/AddPostForm/AddDialogForm.jsx","components/Dialogs/dialogs.jsx","components/Dialogs/dialogsContainer.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Components","RedirectComponent","this","props","to","Component","connect","DialogItem","className","id","name","MessageItem","message","maxLength50","maxLengthCreator","AddDialogFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","dialogsPage","dialogsElements","dialogsData","map","dialog","messageElements","messagesData","values","sendMessage","newPostText","compose","dispatch","newMessageBody","sendMessageCreator"],"mappings":"uNAIIA,EAA6B,SAACC,GAAD,MAAY,CACzCC,OAAQD,EAAME,KAAKD,SAGVE,EAAmB,SAACC,GAAgB,IACvCC,EADsC,4JAExC,WACI,OAAIC,KAAKC,MAAMN,OACR,cAACG,EAAD,eAAgBE,KAAKC,QADE,cAAC,IAAD,CAAUC,GAAG,eAHP,GACZC,aAShC,OAFqCC,YAAQX,EAARW,CAAoCL,K,2JCJ9DM,EARI,SAACJ,GAChB,OACI,qBAAKK,UAAU,gBAAf,SACI,eAAC,IAAD,CAASJ,GAAE,kBAAaD,EAAMM,IAA9B,UAAqCN,EAAMO,KAA3C,UCIGC,G,OARK,SAACR,GACjB,OACI,qBAAKK,UAAU,iBAAf,SACI,+BAAOL,EAAMS,c,yCCDnBC,EAAcC,YAAiB,IAiBtBC,EAFUC,YAAU,CAACC,KAAM,wBAAjBD,EAbH,SAACb,GACnB,OACI,uBAAMe,SAAUf,EAAMgB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,SAAU,CAACC,IAAUX,GAAcH,KAAK,cAAce,YAAY,yBAElG,8BACI,kDCqBDC,EA5BC,SAACvB,GAEb,IAAIP,EAAQO,EAAMwB,YAEdC,EAAkBhC,EAAMiC,YAAYC,KAAI,SAAAC,GAAM,OAAI,cAAC,EAAD,CAAYrB,KAAMqB,EAAOrB,KAAsBD,GAAIsB,EAAOtB,IAAtBsB,EAAOtB,OAC7FuB,EAAkBpC,EAAMqC,aAAaH,KAAI,SAAAlB,GAAO,OAAI,cAAC,EAAD,CAAaA,QAASA,EAAQA,SAAcA,EAAQH,OAM5G,OAAIN,EAAMN,OAGN,sBAAKW,UAAU,UAAf,UACI,qBAAKA,UAAU,iBAAf,SACMoB,IAEN,sBAAKpB,UAAU,WAAf,UACI,8BAAOwB,IACP,cAAC,EAAD,CAAoBd,SAbZ,SAACgB,GACjB/B,EAAMgC,YAAYD,EAAOE,sBAGJ,cAAC,IAAD,CAAUhC,GAAG,Y,yBCG3BiC,sBACX/B,aAfkB,SAACV,GACnB,MAAO,CACH+B,YAAa/B,EAAM+B,gBAIF,SAACW,GACtB,MAAO,CACHH,YAAa,SAACI,GACVD,EAASE,YAAmBD,SAOpCxC,IAFWsC,CAGbX","file":"static/js/4.a00ad802.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Components) => {\r\n    class RedirectComponent extends Component {\r\n        render() {\r\n            if(!this.props.isAuth) return <Redirect to=\"/login\"/>;\r\n            return <Components {...this.props} />\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import React from \"react\";\r\nimport \"./dialogItem.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    return (\r\n        <div className=\"dialogs__item\">\r\n            <NavLink to={`dialogs/${props.id}`}>{props.name} </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport \"./message.css\";\r\n\r\nconst MessageItem = (props) => {\r\n    return (\r\n        <div className=\"messages__item\">\r\n            <span>{props.message}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MessageItem;","import React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../../utils/Validators/validators\";\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddDialogForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} validate={[required, maxLength50]} name=\"newPostText\" placeholder=\"Enter your message\"/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nlet AddDialogFormRedux = reduxForm({form: \"dialogAddMessageForm\"})(AddDialogForm);\r\n\r\nexport default AddDialogFormRedux;","import React from \"react\";\r\nimport \"./dialogs.css\";\r\nimport DialogItem from \"./Sections/DialogItem/dialogItem.jsx\";\r\nimport MessageItem from \"./Sections/Message/message.jsx\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport AddDialogFormRedux from \"./Sections/AddPostForm/AddDialogForm\";\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogsData.map(dialog => <DialogItem name={dialog.name} key={dialog.id} id={dialog.id} />);\r\n    let messageElements = state.messagesData.map(message => <MessageItem message={message.message} key={message.id} />);\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newPostText);\r\n    };\r\n\r\n    if(!props.isAuth) return <Redirect to=\"/login\"/>;\r\n\r\n    return (\r\n        <div className=\"dialogs\">\r\n            <div className=\"dialogs__items\">\r\n                { dialogsElements }\r\n            </div>\r\n            <div className=\"messages\">\r\n                <div>{ messageElements }</div>\r\n                <AddDialogFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Dialogs;","import \"./dialogs.css\";\r\nimport {sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}