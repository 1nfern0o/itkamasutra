{"version":3,"sources":["components/Profile/Sections/ProfileStatus/ProfileStatus.tsx","components/Profile/Sections/ProfileDataForm/ProfileDataForm.tsx","components/Profile/Sections/ProfileInfo/ProfileInfo.tsx","components/Profile/Sections/Post/post.tsx","components/Profile/Sections/Posts/Sections/AddNewPostForm.tsx","components/Profile/Sections/Posts/posts.tsx","components/Profile/Sections/Posts/postsContainer.tsx","components/Profile/profile.tsx","components/Profile/profileContainer.tsx"],"names":["ProfileStatus","props","useState","editMode","setEditMode","status","setStatus","useEffect","className","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","type","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","createField","Input","Textarea","Object","keys","contacts","map","key","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","src","alt","photos","large","target","files","length","initialValues","formData","then","Post","message","likes","maxLength10","maxLengthCreator","required","Posts","postElements","postsData","reverse","post","id","values","addPosts","newPostText","PostsMemorized","memo","PostsContainer","connect","state","profilePage","actions","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","console","refreshProfile","prevProps","prevState","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.80517494.chunk.js","sourcesContent":["import React, {ChangeEvent, FC, useEffect, useState} from \"react\";\r\nimport \"./ProfileStatus.css\";\r\n\r\ntype PropsType = {\r\n    status: string,\r\n    updateStatus: (status: string) => void,\r\n};\r\n\r\nconst ProfileStatus: FC<PropsType> = (props) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n\r\n    const activeEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n    //\r\n    const deactiveEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    };\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]);\r\n\r\n    return (\r\n        <div className=\"profile-status\">\r\n            {!editMode &&\r\n                <div>\r\n                    <b>Status: </b><span onDoubleClick={activeEditMode}>{props.status || \"No status\"}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange}\r\n                           autoFocus={true}\r\n                           onBlur={deactiveEditMode}\r\n                           type=\"text\" value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatus;","import React, {FC} from 'react';\r\nimport {createField, GetStringKeys, Input, Textarea} from \"../../../common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {ProfileType} from \"../../../../types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n};\r\n\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>;\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div><button>save</button></div>\r\n            { error && <div className=\"form-summary-error\">\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <div>\r\n                    <b>Full name</b>: {createField<ProfileTypeKeys>('Full name', 'fullName', [], Input)}\r\n                </div>\r\n                <div>\r\n                    <b>Looking for a job:</b> {createField<ProfileTypeKeys>('', 'lookingForAJob', [], Input, {type: 'checkbox'})}\r\n                </div>\r\n                <div>\r\n                    <b>My professional skills:</b> {createField<ProfileTypeKeys>('My professional skills', 'lookingForAJobDescription', [], Textarea)}\r\n                </div>\r\n                <div>\r\n                    <b>About me:</b> {createField<ProfileTypeKeys>('About me', 'aboutMe', [], Textarea)}\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"description-block__contact\">\r\n                <b>Contacts:</b>\r\n                <ul className=\"contact-social\">\r\n                    {Object.keys(profile.contacts).map(key => (\r\n                        <li key={key} className=\"contact-social__tem\">\r\n                            {/* TODO: create some solition for embedded objects*/}\r\n                            <b>{key}: {createField(key, 'contacts.' + key, [], Input)}</b>\r\n                        </li>\r\n                    ))}\r\n\r\n                </ul>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm);\r\n\r\nexport default ProfileDataFormReduxForm;","import React, {ChangeEvent, FC, useState} from \"react\";\r\nimport \"./ProfileInfo.css\";\r\nimport Preloader from \"../../../common/Preloader/Preloader\";\r\nimport ProfileStatus from \"../ProfileStatus/ProfileStatus\";\r\nimport ProfileDataForm from \"../ProfileDataForm/ProfileDataForm\";\r\nimport {ContactsType, ProfileType} from \"../../../../types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null,\r\n    status: string,\r\n    updateStatus: (newStatus: string) => void,\r\n    isOwner: boolean,\r\n    savePhoto: (file: File) => void,\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: FC<PropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if(e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        // TODO: remove then\r\n       saveProfile(formData).then(() => {\r\n           setEditMode(false);\r\n       })\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img className=\"content__img\" src=\"https://images.pexels.com/photos/2478248/pexels-photo-2478248.jpeg?auto=compress&cs=tinysrgb&h=750&w=1260\" alt=\"\"/>\r\n            </div>\r\n            <div className=\"description-block\">\r\n                <img className=\"description-block__avatar\" src={profile.photos.large || \"https://images.pexels.com/photos/4126255/pexels-photo-4126255.jpeg?cs=srgb&dl=pexels-wesley-carvalho-4126255.jpg&fm=jpg\"} alt=\"\"/>\r\n                { isOwner && <input type=\"file\" onChange={onMainPhotoSelected}/> }\r\n                { editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n                    : <ProfileData goToEditMode={() => {setEditMode(true)}} profile={profile} isOwner={isOwner} />}\r\n                <ProfileStatus status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType,\r\n    isOwner: boolean,\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: FC<ProfileDataPropsType> = ({profile, isOwner,goToEditMode}) => {\r\n    return (\r\n        <>\r\n            {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\r\n            <div>\r\n                <div>\r\n                    <b>Full name</b>: {profile.fullName}\r\n                </div>\r\n                <div>\r\n                    <b>Looking for a job:</b> {profile.lookingForAJob ? 'yes' : 'no'}\r\n                </div>\r\n                { profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n                </div>\r\n                }\r\n                <div>\r\n                    <b>About me :</b> {profile.aboutMe}\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"description-block__contact\">\r\n                <b>Contacts:</b>\r\n                <ul className=\"contact-social\">\r\n                    {Object.keys(profile.contacts).map(key => (\r\n                        <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n                    ))}\r\n\r\n                </ul>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string,\r\n    contactValue: string,\r\n}\r\n\r\nconst Contact: FC<ContactPropsType> = ({contactTitle, contactValue}) => {\r\n    return <li className=\"contact-social__item\"><b>{contactTitle}:</b> {contactValue}</li>;\r\n}\r\n\r\nexport default ProfileInfo;","import React, {FC} from \"react\";\r\nimport \"./post.css\";\r\n\r\ntype PropsType = {\r\n    message: string,\r\n    likes: number\r\n};\r\n\r\nconst Post: FC<PropsType> = (props) => {\r\n    return (\r\n        <div className=\"post__item\">\r\n            <img className=\"post__item_img\" src=\"https://www.serietotaal.nl/images/nieuws/t/6fbi52rzy3ly-full.jpg\" alt=\"\"/>\r\n            <span>{props.message}</span>\r\n            <div>\r\n                <span>like</span>\r\n                <span>{props.likes}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport { FC } from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../../../utils/Validators/validators\";\r\nimport {createField, GetStringKeys, Textarea} from \"../../../../common/FormsControls/FormsControls\";\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\ntype PropsType = {};\r\n\r\nexport type AddPostFormValuesType = {\r\n    newPostText: string\r\n};\r\n\r\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostFormValuesType>;\r\n\r\nconst AddNewPostForm: FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<AddPostFormValuesTypeKeys>(\"Post message...\", \"newPostText\", [required, maxLength10], Textarea)}\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default reduxForm<AddPostFormValuesType, PropsType>({form: \"profileAddNewPostForm\"})(AddNewPostForm);","import React, {FC, memo} from \"react\";\r\nimport \"./posts.css\";\r\nimport Post from \"../Post/post\";\r\nimport AddNewPostForm, {AddPostFormValuesType} from \"./Sections/AddNewPostForm\";\r\nimport {PostType} from \"../../../../types/types\";\r\n\r\nexport type MapPropsType = {\r\n    postsData: Array<PostType>,\r\n};\r\n\r\nexport type DispatchPropsType = {\r\n    addPosts: (newPostText: string) => void,\r\n}\r\n\r\nconst Posts: FC<MapPropsType & DispatchPropsType> = props => {\r\n    let postElements = [...props.postsData].reverse().map(post => <Post message={post.message} key={post.id} likes={post.likes} />);\r\n\r\n    let addNewMessage = (values: AddPostFormValuesType) => {\r\n        props.addPosts(values.newPostText);\r\n    };\r\n\r\n    return (\r\n        <div className=\"post\">\r\n            <h3>my post</h3>\r\n            <AddNewPostForm onSubmit={addNewMessage}/>\r\n            <div className=\"posts\">\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nconst PostsMemorized = memo(Posts);\r\n\r\nexport default PostsMemorized;","import {actions} from \"../../../../redux/profile-reducer\";\r\nimport Posts, {DispatchPropsType, MapPropsType} from \"./posts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../../redux/redux-store\";\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        postsData: state.profilePage.postsData\r\n    }\r\n};\r\n\r\n\r\n\r\nconst PostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n    addPosts: actions.addPostActionCreator\r\n})(Posts);\r\n\r\nexport default PostsContainer;","import React from \"react\";\r\nimport \"./profile.css\"\r\nimport ProfileInfo from \"./Sections/ProfileInfo/ProfileInfo\";\r\nimport PostsContainer from \"./Sections/Posts/postsContainer\";\r\nimport { FC } from \"react\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null,\r\n    status: string,\r\n    updateStatus: (status: string) => void,\r\n    isOwner: boolean,\r\n    savePhoto: (file: File) => void,\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n};\r\n\r\nconst Profile: FC<PropsType> = (props) => {\r\n    return (\r\n        <div className=\"content\">\r\n            <ProfileInfo savePhoto={props.savePhoto}\r\n                         isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         saveProfile={props.saveProfile}\r\n                         updateStatus={props.updateStatus} />\r\n            <PostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n","import React, {Component, ComponentType} from \"react\";\r\nimport \"./profile.css\"\r\nimport Profile from \"./profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, updateStatus, savePhoto, saveProfile} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>;\r\ntype DispatchPropsType = {\r\n    getUserProfile: (userId: number) => void,\r\n    getStatus: (userId: number) => void,\r\n    updateStatus: (status: string) => void,\r\n    savePhoto: (file: File) => void,\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n};\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n};\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nclass ProfileContainer extends Component<PropsType> {\r\n    constructor(props: PropsType) {\r\n        super(props);\r\n    };\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                // TODO: may be replace push with Redirect??\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n\r\n        if (!userId) {\r\n            console.error(\"ID should exists in URI params or in state('authorizedUserId')\");\r\n        } else {\r\n            this.props.getUserProfile(userId);\r\n            this.props.getStatus(userId);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if(this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(): void {\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto} />\r\n        );\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return ({\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    });\r\n}\r\n\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}