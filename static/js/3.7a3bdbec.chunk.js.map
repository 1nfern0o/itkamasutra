{"version":3,"sources":["hoc/withAuthRedirect.js","components/Profile/Sections/ProfileStatus/ProfileStatus.tsx","components/Profile/Sections/ProfileDataForm/ProfileDataForm.jsx","components/Profile/Sections/ProfileInfo/ProfileInfo.jsx","components/Profile/Sections/Post/post.jsx","components/Profile/Sections/Posts/Sections/AddNewPostForm.jsx","components/Profile/Sections/Posts/posts.jsx","components/Profile/Sections/Posts/postsContainer.jsx","components/Profile/profile.jsx","components/Profile/profileContainer.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Components","RedirectComponent","this","props","to","Component","connect","ProfileStatus","useState","editMode","setEditMode","status","setStatus","useEffect","className","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","type","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","createField","Input","Textarea","Object","keys","contacts","map","key","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","src","alt","photos","large","target","files","length","initialValues","formData","then","Post","message","likes","maxLength10","maxLengthCreator","Field","component","name","placeholder","validate","required","Posts","memo","postElements","postsData","reverse","post","id","values","addPosts","newPostText","PostsContainer","profilePage","dispatch","actions","addPostActionCreator","Profile","ProfileContainer","userId","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","withRouter"],"mappings":"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","file":"static/js/3.7a3bdbec.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Components) => {\r\n    class RedirectComponent extends Component {\r\n        render() {\r\n            if(!this.props.isAuth) return <Redirect to=\"/login\"/>;\r\n            return <Components {...this.props} />\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import React, {ChangeEvent, FC, useEffect, useState} from \"react\";\r\nimport \"./ProfileStatus.css\";\r\n\r\ntype PropsType = {\r\n    status: string,\r\n    updateStatus: (newStatus: string) => void,\r\n};\r\n\r\nconst ProfileStatus: FC<PropsType> = (props) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n\r\n    const activeEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n    //\r\n    const deactiveEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    };\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]);\r\n\r\n    return (\r\n        <div className=\"profile-status\">\r\n            {!editMode &&\r\n                <div>\r\n                    <b>Status: </b><span onDoubleClick={activeEditMode}>{props.status || \"No status\"}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange}\r\n                           autoFocus={true}\r\n                           onBlur={deactiveEditMode}\r\n                           type=\"text\" value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatus;","import React from 'react';\r\nimport {createField, Input, Textarea} from \"../../../common/FormsControls/FormsControls\";\r\nimport {reduxForm} from \"redux-form\";\r\n\r\nconst ProfileDataForm = ({handleSubmit, profile, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div><button>save</button></div>\r\n            { error && <div className=\"form-summary-error\">\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <div>\r\n                    <b>Full name</b>: {createField('Full name', 'fullName', [], Input)}\r\n                </div>\r\n                <div>\r\n                    <b>Looking for a job:</b> {createField('', 'lookingForAJob', [], Input, {type: 'checkbox'})}\r\n                </div>\r\n                <div>\r\n                    <b>My professional skills:</b> {createField('My professional skills', 'lookingForAJobDescription', [], Textarea)}\r\n                </div>\r\n                <div>\r\n                    <b>About me:</b> {createField('About me', 'aboutMe', [], Textarea)}\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"description-block__contact\">\r\n                <b>Contacts:</b>\r\n                <ul className=\"contact-social\">\r\n                    {Object.keys(profile.contacts).map(key => (\r\n                        <li key={key} className=\"contact-social__tem\">\r\n                            <b>{key}: {createField(key, 'contacts.' + key, [], Input)}</b>\r\n                        </li>\r\n                    ))}\r\n\r\n                </ul>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({form: 'edit-profile'})(ProfileDataForm);\r\n\r\nexport default ProfileDataFormReduxForm;","import React, {useState} from \"react\";\r\nimport \"./ProfileInfo.css\";\r\nimport Preloader from \"../../../common/Preloader/Preloader\";\r\nimport ProfileStatus from \"../ProfileStatus/ProfileStatus\";\r\nimport ProfileDataForm from \"../ProfileDataForm/ProfileDataForm\";\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e) => {\r\n        if(e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData) => {\r\n       saveProfile(formData).then(() => {\r\n           setEditMode(false);\r\n       })\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img className=\"content__img\" src=\"https://images.pexels.com/photos/2478248/pexels-photo-2478248.jpeg?auto=compress&cs=tinysrgb&h=750&w=1260\" alt=\"\"/>\r\n            </div>\r\n            <div className=\"description-block\">\r\n                <img className=\"description-block__avatar\" src={profile.photos.large || \"https://images.pexels.com/photos/4126255/pexels-photo-4126255.jpeg?cs=srgb&dl=pexels-wesley-carvalho-4126255.jpg&fm=jpg\"} alt=\"\"/>\r\n                { isOwner && <input type=\"file\" onChange={onMainPhotoSelected}/> }\r\n                { editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n                    : <ProfileData goToEditMode={() => {setEditMode(true)}} profile={profile} isOwner={isOwner} />}\r\n                <ProfileStatus status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileData = ({profile, isOwner,goToEditMode}) => {\r\n    return (\r\n        <>\r\n            {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\r\n            <div>\r\n                <div>\r\n                    <b>Full name</b>: {profile.fullName}\r\n                </div>\r\n                <div>\r\n                    <b>Looking for a job:</b> {profile.lookingForAJob ? 'yes' : 'no'}\r\n                </div>\r\n                { profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n                </div>\r\n                }\r\n                <div>\r\n                    <b>About me :</b> {profile.aboutMe}\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"description-block__contact\">\r\n                <b>Contacts:</b>\r\n                <ul className=\"contact-social\">\r\n                    {Object.keys(profile.contacts).map(key => (\r\n                        <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n                    ))}\r\n\r\n                </ul>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst Contact = ({contactTitle, contactValue}) => {\r\n    return <li className=\"contact-social__item\"><b>{contactTitle}:</b> {contactValue}</li>;\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport \"./post.css\";\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className=\"post__item\">\r\n            <img className=\"post__item_img\" src=\"https://www.serietotaal.nl/images/nieuws/t/6fbi52rzy3ly-full.jpg\" alt=\"\"/>\r\n            <span>{props.message}</span>\r\n            <div>\r\n                <span>like</span>\r\n                <span>{props.likes}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../../../utils/Validators/validators\";\r\nimport {Textarea} from \"../../../../common/FormsControls/FormsControls\";\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name=\"newPostText\" placeholder=\"Post message...\" validate={[required, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default reduxForm({form: \"profileAddNewPostForm\"})(AddNewPostForm);","import React, {memo} from \"react\";\r\nimport \"./posts.css\";\r\nimport Post from \"../Post/post.jsx\";\r\nimport AddPostForm from \"./Sections/AddNewPostForm\";\r\n\r\nconst Posts = memo(props => {\r\n    let postElements = [...props.postsData].reverse().map(post => <Post message={post.message} key={post.id} likes={post.likes} />);\r\n\r\n    let addNewMessage = (values) => {\r\n        props.addPosts(values.newPostText);\r\n    };\r\n\r\n    return (\r\n        <div className=\"post\">\r\n            <h3>my post</h3>\r\n            <AddPostForm onSubmit={addNewMessage}/>\r\n            <div className=\"posts\">\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n});\r\n\r\nexport default Posts;","import {actions} from \"../../../../redux/profile-reducer\";\r\nimport Posts from \"./posts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        postsData: state.profilePage.postsData,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPosts: (newPostText) => {\r\n            dispatch(actions.addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nconst PostsContainer = connect(mapStateToProps, mapDispatchToProps)(Posts);\r\n\r\nexport default PostsContainer;","import React from \"react\";\r\nimport \"./profile.css\"\r\nimport ProfileInfo from \"./Sections/ProfileInfo/ProfileInfo.jsx\";\r\nimport PostsContainer from \"./Sections/Posts/postsContainer\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div className=\"content\">\r\n            <ProfileInfo savePhoto={props.savePhoto}\r\n                         isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         saveProfile={props.saveProfile}\r\n                         updateStatus={props.updateStatus} />\r\n            <PostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n","import React, {Component} from \"react\";\r\nimport \"./profile.css\"\r\nimport Profile from \"./profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, updateStatus, savePhoto, saveProfile} from \"../../redux/profile-reducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if(this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto} />\r\n        );\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return ({\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    });\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}