{"version":3,"sources":["pages/Chat/ChatPage.tsx"],"names":["Message","memo","message","src","photo","alt","style","width","userName","Messages","messages","useSelector","state","chat","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","useEffect","current","scrollIntoView","behavior","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","id","ref","AddMessageForm","setMessage","dispatch","useDispatch","status","onChange","value","disabled","onClick","sendMessage","Chat","startMessagesListening","stopMessagesListening","ChatPage"],"mappings":"wKAOMA,EAA+CC,gBAAK,YAAkB,IAAfC,EAAc,EAAdA,QAEzD,OACI,gCACI,qBAAKC,IAAKD,EAAQE,MAAOC,IAAI,SAASC,MAAO,CAAEC,MAAO,UACtD,4BAAIL,EAAQM,WACZ,uBACA,4BACKN,EAAQA,UAEb,6BAKNO,EAAe,WACjB,IAAMC,EAAWC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,YAC3DI,EAAoBC,iBAAuB,MACjD,EAAwCC,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAiBA,OANAC,qBAAU,WACY,IAAD,EAAdF,IACC,UAAAH,EAAkBM,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAE1D,CAACZ,IAGA,sBAAKJ,MAAO,CAAEiB,OAAQ,QAASC,UAAW,QAAUC,SAhBlC,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cACfC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC5EhB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAWpC,UACKR,EAASwB,KAAI,SAAAC,GAAC,OAAI,cAACnC,EAAD,CAAoBE,QAASiC,GAAfA,EAAEC,OACnC,qBAAKC,IAAKvB,QAKhBwB,EAAqB,WACvB,MAA8BtB,mBAAS,IAAvC,mBAAOd,EAAP,KAAgBqC,EAAhB,KACMC,EAAWC,cAEXC,EAAS/B,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAK6B,UAa/D,OACI,gCACI,8BACI,0BAAUC,SAAU,SAACjB,GAAD,OAAOa,EAAWb,EAAEE,cAAcgB,QAAQA,MAAO1C,MAEzE,8BACI,cAAC,IAAD,CAAQ2C,SAAqB,UAAXH,EAAoBI,QAhBvB,WACnB5C,IAIJsC,EAASO,YAAY7C,IACrBqC,EAAW,MAUH,wBAMVS,EAAW,WACb,IAAMR,EAAWC,cAEXC,EAAS/B,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAK6B,UAS/D,OAPAvB,qBAAU,WAEN,OADAqB,EAASS,eACF,WACHT,EAASU,kBAEd,IAGC,gCACgB,UAAXR,GAAsB,kEACvB,qCACI,cAACjC,EAAD,IACA,cAAC6B,EAAD,WAcDa,UARM,WACjB,OACI,8BACI,cAACH,EAAD","file":"static/js/5.b490dbfe.chunk.js","sourcesContent":["import { Button } from \"antd\";\r\nimport React, {FC, memo, useEffect, useRef, useState} from \"react\";\r\nimport { ChatMessageAPIType } from \"../../api/chat-api\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {sendMessage, startMessagesListening, stopMessagesListening} from \"../../redux/chat-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nconst Message: FC<{ message: ChatMessageAPIType }> = memo(({ message }) => {\r\n\r\n    return (\r\n        <div>\r\n            <img src={message.photo} alt=\"avatar\" style={{ width: '30px' }} />\r\n            <b>{message.userName}</b>\r\n            <br/>\r\n            <p>\r\n                {message.message}\r\n            </p>\r\n            <hr/>\r\n        </div>\r\n    )\r\n});\r\n\r\nconst Messages: FC = () => {\r\n    const messages = useSelector((state: AppStateType) => state.chat.messages);\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null);\r\n    const [isAutoScroll, setIsAutoScroll] = useState(true);\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget;\r\n        if(Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n            !isAutoScroll && setIsAutoScroll(true);\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'});\r\n        }\r\n    }, [messages]);\r\n\r\n    return (\r\n        <div style={{ height: '400px', overflowY: 'auto' }} onScroll={scrollHandler}>\r\n            {messages.map(m => <Message key={m.id} message={m} />)}\r\n            <div ref={messagesAnchorRef} />\r\n        </div>\r\n    )\r\n};\r\n\r\nconst AddMessageForm: FC = () => {\r\n    const [message, setMessage] = useState('');\r\n    const dispatch = useDispatch();\r\n\r\n    const status = useSelector((state: AppStateType) => state.chat.status);\r\n\r\n\r\n    const sendMessageHandler = () => {\r\n        if(!message) {\r\n            return;\r\n        }\r\n\r\n        dispatch(sendMessage(message));\r\n        setMessage('');\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message} />\r\n            </div>\r\n            <div>\r\n                <Button disabled={status !== 'ready'} onClick={sendMessageHandler}>Send</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst Chat: FC = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const status = useSelector((state: AppStateType) => state.chat.status);\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening());\r\n        return () => {\r\n            dispatch(stopMessagesListening());\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            {status === 'error' && <div>Some Error. Please refresh page</div> }\r\n            <>\r\n                <Messages />\r\n                <AddMessageForm />\r\n            </>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst ChatPage: FC = () => {\r\n    return (\r\n        <div>\r\n            <Chat />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ChatPage;"],"sourceRoot":""}