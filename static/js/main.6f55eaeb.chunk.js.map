{"version":3,"sources":["redux/dialogs-reducer.ts","api/api.ts","api/security-api.ts","api/profile-api.ts","api/users-api.ts","api/auth-api.ts","components/common/FormsControls/FormsControls.tsx","reportWebVitals.js","components/Menu/menu.tsx","utils/object-helpers.ts","redux/users-reducer.ts","components/common/Paginator/Paginator.tsx","components/Users/user.tsx","components/Users/UsersSearchForm.tsx","components/Users/users.tsx","redux/users-selectors.ts","components/Users/usersContainer.tsx","components/Header/header.tsx","redux/auth-reducer.ts","components/Header/headerContainer.tsx","components/Login/Sections/LoginForm.tsx","components/Login/Login.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","hoc/withSuspence.tsx","App.tsx","index.tsx","utils/Validators/validators.ts","assets/images/preloader.svg","components/common/Preloader/Preloader.tsx","redux/profile-reducer.ts"],"names":["initialState","dialogsData","id","name","messagesData","message","actions","sendMessage","newMessageBody","type","dialogsReducer","state","action","body","ResultCodesEnum","ResultCodeForCaptchaEnum","securityAPI","getCaptchaUrl","instance","get","profileAPI","getProfile","userId","then","res","data","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","headers","saveProfile","profile","usersAPI","getUsers","currentPage","pageSize","term","friend","follow","post","unfollow","delete","authAPI","me","login","email","password","rememberMe","captcha","logout","axios","create","withCredentials","baseURL","FormControl","meta","touched","error","children","hasError","className","Textarea","props","input","restProps","Input","createField","placeholder","validators","component","text","validate","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Menu","to","updateObjectInArray","items","itemId","objPropName","newObjProps","map","user","users","totalUsersCount","isFetching","followingInProgress","filter","payload","count","_followUnfollowFlow","dispatch","apiMethod","actionCreator","a","resultCode","usersReducer","Paginator","totalItemsCount","onPageChanged","x","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","onClick","p","User","src","photos","small","alt","followed","disabled","some","usersSearchFormValidate","values","UsersSearchForm","memo","initialValues","onSubmit","setSubmitting","onFilterChanged","isSubmitting","as","value","Users","createSelector","usersPage","u","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getUsersFilter","UsersContainer","pageNumber","requestUsers","this","pageTitle","Preloader","Component","compose","connect","bind","page","response","totalCount","Header","isAuth","captchaUrl","getAuthUserData","meData","Success","url","authReducer","HeaderContainer","auth","LoginReduxForm","reduxForm","form","handleSubmit","required","undefined","CaptchaIsRequired","messages","length","stopSubmit","_error","initialized","appReducer","sidebar","sidebarReducer","rootReducer","combineReducers","profilePage","profileReducer","dialogsPage","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","__store__","withSuspense","WrappedComponent","fallback","DialogsContainer","lazy","ProfileContainer","SuspendedDialogs","SuspendedProfile","App","catchAllUnhandledErrors","e","alert","initializeApp","addEventListener","removeEventListener","exact","path","AppContainer","withRouter","SamuraiJSApp","ReactDOM","render","StrictMode","document","getElementById","maxLengthCreator","maxLength","preloader","postsData","likes","addPostActionCreator","newPostText","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","getUserProfile","console","log","file","getState","Error","Promise","reject","newPost"],"mappings":"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","file":"static/js/main.6f55eaeb.chunk.js","sourcesContent":["import {InferActionsTypes} from \"./redux-store\";\r\n\r\ntype DialogType = {\r\n    id: number,\r\n    name: string\r\n};\r\n\r\ntype MessageType = {\r\n    id: number,\r\n    message: string\r\n}\r\n\r\nlet initialState = {\r\n    dialogsData: [\r\n        {\r\n            id: 1,\r\n            name: \"Roman\"\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Dimych\"\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Petro\"\r\n        },\r\n        {\r\n            id: 4,\r\n            name: \"Andrey\"\r\n        }\r\n    ] as Array<DialogType>,\r\n    messagesData: [\r\n        {\r\n            id: 1,\r\n            message: \"Hi world!\"\r\n        },\r\n        {\r\n            id: 2,\r\n            message: \"Hi wrld!\"\r\n        },\r\n        {\r\n            id: 3,\r\n            message: \"Yo\"\r\n        }\r\n    ] as Array<MessageType>\r\n}\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/DIALOGS/SEND_MESSAGE\": {\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messagesData: [...state.messagesData, {id: 6, message: body}],\r\n\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    sendMessage: (newMessageBody: string) => ({\r\n        type: \"SN/DIALOGS/SEND_MESSAGE\",\r\n        newMessageBody\r\n    } as const)\r\n}\r\n\r\n\r\nexport default dialogsReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\n","import axios from \"axios\";\r\nimport {securityAPI} from \"./security-api\";\r\nimport {profileAPI} from \"./profile-api\";\r\nimport {usersAPI} from \"./users-api\";\r\nimport {authAPI} from \"./auth-api\";\r\nimport {UserType} from \"../types/types\";\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"c4158ed8-d0fa-48f5-978e-b07ad1bf0132\"\r\n    }\r\n});\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport enum ResultCodeForCaptchaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport {\r\n    securityAPI,\r\n    profileAPI,\r\n    usersAPI,\r\n    authAPI,\r\n}","import {instance} from \"./api\";\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`);\r\n    }\r\n};","import {PhotosType, ProfileType} from \"../types/types\";\r\nimport {instance, APIResponseType} from \"./api\";\r\n\r\ntype SavePhotosResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/${userId}`).then(res => res.data);\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/${userId}`).then(res => res.data);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status/`, {status}).then(res => res.data);\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile);\r\n        return instance.put<APIResponseType<SavePhotosResponseDataType>>(`profile/status/`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data);\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data);\r\n    }\r\n};","import { GetItemsType, instance, APIResponseType } from \"./api\";\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10, term: string = '', friend:null | boolean = null) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`)).then(res => res.data);\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data);\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>;\r\n    }\r\n};","import {instance, APIResponseType, ResultCodesEnum, ResultCodeForCaptchaEnum} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number,\r\n    email: string,\r\n    login: string\r\n}\r\n\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data);\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodeForCaptchaEnum | ResultCodesEnum>>(`auth/login`, {email, password, rememberMe, captcha})\r\n            .then(res => res.data);\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    }\r\n};","import React, {FC} from \"react\";\r\nimport \"./FormsControls.css\";\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport {FieldValidatorType} from \"../../../utils/Validators/validators\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={`form-control ${hasError ? \"error\" : \"\"}`}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <div>\r\n                {hasError && <span>{error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: FC<WrappedFieldProps> = (props) => {\r\n    // const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return (\r\n        <FormControl {...props}>\r\n            <textarea {...input} {...restProps} />\r\n        </FormControl>\r\n    )\r\n};\r\n\r\nexport const Input: FC<WrappedFieldProps> = (props) => {\r\n    // const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return (\r\n        <FormControl {...props}>\r\n            <input {...input} {...restProps} />\r\n        </FormControl>\r\n    )\r\n};\r\n\r\nexport function createField<FormKeysType extends string>(\r\n        placeholder: string | undefined,\r\n        name: FormKeysType,\r\n        validators: Array<FieldValidatorType>,\r\n        component: FC<WrappedFieldProps>,\r\n        props = {},\r\n        text = \"\"\r\n    ){\r\n        return (\r\n            <div>\r\n                <Field placeholder={placeholder}\r\n                       name={name}\r\n                       validate={validators}\r\n                       component={component}\r\n                       {...props}/>{text}\r\n            </div>\r\n        )\r\n    }\r\n\r\nexport type GetStringKeys<T> =  Extract<keyof T, string>;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React, {FC} from \"react\";\r\nimport \"./menu.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Menu: FC = () => {\r\n    return (\r\n        <nav className=\"menu\">\r\n            <ul className=\"menu__list\">\r\n                <li>\r\n                    <NavLink to=\"/profile\" className=\"menu__item-link\">Profile</NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink to=\"/dialogs\" className=\"menu__item-link\">Messages</NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink to=\"/users\" className=\"menu__item-link\">Users</NavLink>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Menu;","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n    return items.map((user: any) => {\r\n        if (user[objPropName] === itemId.userId) {\r\n            return {...user, ...newObjProps}\r\n        }\r\n        return user;\r\n    })\r\n};","import {APIResponseType, usersAPI} from \"../api/api\";\r\nimport {updateObjectInArray} from \"../utils/object-helpers\";\r\nimport {UserType} from \"../types/types\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>, // array of users ids\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialState => {\r\n    switch (action.type) {\r\n        case \"SN/USERS/FOLLOW\": {\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {follow: true} )\r\n                // users: state.users.map( user => {\r\n                //     if (user.id === action.userId) {\r\n                //         return {\r\n                //             ...user,\r\n                //             followed: true\r\n                //         }\r\n                //     }\r\n                //     return user;\r\n                // }),\r\n            }\r\n        }\r\n\r\n        case \"SN/USERS/UNFOLLOW\": {\r\n            return  {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {follow: false} )\r\n            };\r\n        }\r\n\r\n        case \"SN/USERS/SET_USERS\": {\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        }\r\n\r\n        case \"SN/USERS/SET_CURRENT_PAGE\": {\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        }\r\n\r\n        case \"SN/USERS/SET_TOTAL_USERS_COUNT\": {\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.count\r\n            }\r\n        }\r\n\r\n        case \"SN/USERS/TOGGLE_IS_FETCHING\": {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        }\r\n        case \"SN/USERS/SET_FILTER\": {\r\n            return {...state, filter: action.payload}\r\n        }\r\n        case \"SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS\": {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({\r\n        type: \"SN/USERS/FOLLOW\",\r\n        userId\r\n    } as const),\r\n\r\n    unfollowSuccess: (userId: number) => ({\r\n        type: \"SN/USERS/UNFOLLOW\",\r\n        userId\r\n    } as const),\r\n\r\n    setUsers: (users: Array<UserType>) => ({\r\n        type: \"SN/USERS/SET_USERS\",\r\n        users\r\n    } as const),\r\n\r\n    setCurrentPage: (currentPage: number) => ({\r\n        type: \"SN/USERS/SET_CURRENT_PAGE\",\r\n        currentPage\r\n    } as const),\r\n\r\n    setFilter: (filter: FilterType) => ({\r\n        type: \"SN/USERS/SET_FILTER\",\r\n        payload: filter\r\n    } as const),\r\n\r\n    setTotalUsersCount: (totalUsersCount: number) => ({\r\n        type: \"SN/USERS/SET_TOTAL_USERS_COUNT\",\r\n        count: totalUsersCount\r\n    } as const),\r\n\r\n    toggleIsFetching: (isFetching: boolean) => ({\r\n        type: \"SN/USERS/TOGGLE_IS_FETCHING\",\r\n        isFetching\r\n    } as const),\r\n\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\r\n        type: \"SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS\",\r\n        isFetching,\r\n        userId\r\n    } as const),\r\n};\r\n\r\n\r\nexport const requestUsers =\r\n    (page: number, pageSize: number, filter: FilterType): ThunkType =>\r\n    async (dispatch) => {\r\n    dispatch(actions.toggleIsFetching(true));\r\n    dispatch(actions.setCurrentPage(page));\r\n    dispatch(actions.setFilter(filter));\r\n\r\n    let response = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend);\r\n\r\n    dispatch(actions.toggleIsFetching(false));\r\n    dispatch(actions.setUsers(response.items));\r\n    dispatch(actions.setTotalUsersCount(response.totalCount));\r\n};\r\n\r\nconst _followUnfollowFlow = async (\r\n    dispatch: Dispatch<ActionsTypes>, userId: number, apiMethod: (userId: number) => Promise<APIResponseType>,\r\n    actionCreator: (userId: number) => ActionsTypes) => {\r\n\r\n    dispatch(actions.toggleFollowingProgress(true, userId));\r\n    let response = await apiMethod(userId);\r\n\r\n    if (response.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(actions.toggleFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => async (dispatch) => {\r\n    await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess);\r\n};\r\n\r\nexport const unfollow = (userId: number): ThunkType => async (dispatch) => {\r\n    await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess);\r\n};\r\n\r\nexport default usersReducer;\r\n\r\nexport type InitialState = typeof initialState;\r\nexport type FilterType = typeof initialState.filter;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsTypes>;","import React, { useState, FC } from \"react\";\r\nimport \"./Paginator.css\";\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number,\r\n    currentPage?: number,\r\n    onPageChanged?: (pageNumber: number) => void,\r\n    pageSize: number,\r\n    portionSize?: number\r\n}\r\n\r\nconst Paginator: FC<PropsType> = ({\r\n          totalItemsCount,\r\n          currentPage = 1,\r\n          onPageChanged = x => x,\r\n          pageSize,\r\n          portionSize = 10\r\n}) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages: Array<number> = [];\r\n\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return (\r\n        <div className=\"paginator\">\r\n            {portionNumber > 1 &&\r\n                <button onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</button>}\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map((p) => (\r\n                    <span className={`${(currentPage === p ?\"user__page-select\": \"\")} user__page-number`}\r\n                          key={p}\r\n                          onClick={() => { onPageChanged(p) }}>{p}</span>\r\n                ))\r\n            }\r\n            {portionCount > portionNumber &&\r\n            <button onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</button>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Paginator;","import React, {FC} from \"react\";\r\nimport \"./users.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport { UserType } from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\n\r\nconst User: FC<PropsType> = ({user, followingInProgress, unfollow, follow}) => {\r\n    return (\r\n            <div className=\"user\">\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={\"/profile/\" + user.id}>\r\n                            <img className=\"user__avatar\" src={`${user.photos.small != null ? user.photos.small : \"https://images.pexels.com/photos/1312023/pexels-photo-1312023.jpeg?cs=srgb&dl=pexels-michael-morse-1312023.jpg&fm=jpg\"}`} alt=\"\"/>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        { user.followed\r\n                            ? <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                      onClick={ () => { unfollow(user.id); }}>UnFollow</button>\r\n                            :  <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                       onClick={ () => { follow(user.id); }}>Follow</button>}\r\n                    </div>\r\n                </span>\r\n                <span>\r\n                    <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{user.id}</div>\r\n                        <div>{`user.location.country`}</div>\r\n                        <div>{`user.location.city`}</div>\r\n                    </span>\r\n                </span>\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default User;","import React, {FC, memo} from \"react\";\r\nimport {Field, Form, Formik} from \"formik\";\r\nimport {FilterType} from \"../../redux/users-reducer\";\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n    const errors = {};\r\n    return errors;\r\n};\r\n\r\ntype FormType = {\r\n    term: string,\r\n    friend: 'true' | 'false' | 'null'\r\n}\r\n\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void,\r\n};\r\n\r\nconst UsersSearchForm: FC<PropsType> = memo ((props) => {\r\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void } ) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\r\n        }\r\n        props.onFilterChanged(filter);\r\n        setSubmitting(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{ term: '', friend: 'null' }}\r\n                validate={usersSearchFormValidate}\r\n                onSubmit={submit}\r\n            >\r\n                {({isSubmitting}) => (\r\n                    <Form>\r\n                        <Field name=\"term\" type=\"text\" />\r\n                        <Field name=\"friend\" as=\"select\">\r\n                            <option value=\"null\">All</option>\r\n                            <option value=\"true\">Only followed</option>\r\n                            <option value=\"false\">Only unfollowed</option>\r\n                        </Field>\r\n                        <button type=\"submit\" disabled={isSubmitting}>Find</button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default UsersSearchForm;","import React, { FC } from \"react\";\r\nimport \"./users.css\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./user\";\r\nimport {UserType} from \"../../types/types\";\r\nimport UsersSearchForm from \"./UsersSearchForm\";\r\nimport {FilterType} from \"../../redux/users-reducer\";\r\n\r\ntype PropsType = {\r\n    currentPage: number,\r\n    onPageChanged: (pageNumber: number) => void,\r\n    onFilterChanged: (filter: FilterType) => void,\r\n    totalUsersCount: number,\r\n    pageSize: number,\r\n    users: Array<UserType>,\r\n    followingInProgress: Array<number>,\r\n    unfollow: (userId: number) => void,\r\n    follow: (userId: number) => void\r\n}\r\n\r\nconst Users: FC<PropsType> = ({\r\n                                  currentPage,\r\n                                  onPageChanged,\r\n                                  totalUsersCount,\r\n                                  pageSize,\r\n                                  users,\r\n                                  followingInProgress,\r\n                                  unfollow,\r\n                                  follow,\r\n                                  ...props\r\n}) => {\r\n    return (\r\n        <div>\r\n            <UsersSearchForm onFilterChanged={props.onFilterChanged} />\r\n            <Paginator currentPage={currentPage}\r\n                       onPageChanged={onPageChanged}\r\n                       totalItemsCount={totalUsersCount}\r\n                       pageSize={pageSize}/>\r\n            <div>\r\n                {users.map(user => (\r\n                    <User user={user}\r\n                         followingInProgress={followingInProgress}\r\n                         follow={follow}\r\n                         unfollow={unfollow}\r\n                         key={user.id}\r\n                     />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Users;","import { createSelector } from \"reselect\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nexport const getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users.filter(u => true);\r\n};\r\n\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n    return users.filter(u => true);\r\n});\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n};\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n};\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n};\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n};\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n};\r\n\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter;\r\n};","import React, {Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    follow,\r\n    unfollow,\r\n    requestUsers, FilterType\r\n} from \"../../redux/users-reducer\";\r\nimport Users from \"./users\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getUsers,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getCurrentPage,\r\n    getIsFetching,\r\n    getFollowingInProgress,\r\n    getUsersFilter,\r\n} from \"../../redux/users-selectors\";\r\nimport {UserType} from \"../../types/types\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    currentPage: number,\r\n    pageSize: number,\r\n    isFetching: boolean,\r\n    totalUsersCount: number,\r\n    users: Array<UserType>,\r\n    followingInProgress: Array<number>,\r\n    filter: FilterType,\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    unfollow: (userId: number) => void,\r\n    follow: (userId: number) => void,\r\n    requestUsers: (currentPage: number, pageSize: number, filter: FilterType) => void,\r\n}\r\n\r\ntype OwnPropsType = {\r\n    pageTitle: string\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType;\r\n\r\nclass UsersContainer extends Component<PropsType> {\r\n    componentDidMount() {\r\n        const {currentPage, pageSize, filter} = this.props;\r\n        this.props.requestUsers(currentPage, pageSize, filter);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        const {pageSize, filter} = this.props;\r\n        this.props.requestUsers(pageNumber, pageSize, filter);\r\n    };\r\n\r\n    onFilterChanged = (filter: FilterType) => {\r\n        const {pageSize} = this.props;\r\n        this.props.requestUsers(1, pageSize, filter);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <h2>{this.props.pageTitle}</h2>\r\n                {this.props.isFetching ? <Preloader /> : null}\r\n                <Users totalUsersCount={this.props.totalUsersCount}\r\n                                  pageSize={this.props.pageSize}\r\n                                  currentPage={this.props.currentPage}\r\n                                  onPageChanged={this.onPageChanged}\r\n                                  onFilterChanged={this.onFilterChanged}\r\n                                  users={this.props.users}\r\n                                  follow={this.props.follow}\r\n                                  unfollow={this.props.unfollow}\r\n                                  followingInProgress={this.props.followingInProgress} />\r\n            </>\r\n        );\r\n    };\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n        filter: getUsersFilter(state),\r\n    };\r\n};\r\n\r\nexport default compose(\r\n    connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(\r\n        mapStateToProps,\r\n        {follow, unfollow, requestUsers})\r\n)(UsersContainer);","import React, {FC} from \"react\"\r\nimport \"./header.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type MapPropsType = {\r\n    isAuth: boolean,\r\n    login: string | null,\r\n};\r\n\r\nexport type DispatchPropsType = {\r\n    logout: () => void,\r\n};\r\n\r\nconst Header: FC<MapPropsType & DispatchPropsType> = (props) => {\r\n    return (\r\n        <header className=\"header\">\r\n            <img className=\"logo\" src=\"https://image.neoseo.com.ua/image/catalog/foto_statti/topsovetovposozdanijubesplatnogologotipadljasajta/logo-design.png\" alt=\"Logo header\"/>\r\n            <div className=\"login-block\">\r\n                {props.isAuth\r\n                    ? <div>{props.login} - <button onClick={props.logout}>Log out</button></div>\r\n                    : <NavLink className=\"login-block__link\" to={\"/login\"}>Login</NavLink>\r\n                }\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import {authAPI, ResultCodeForCaptchaEnum, ResultCodesEnum, securityAPI} from '../api/api';\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\n\r\nlet initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null // if null , then captcha is not required\r\n};\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n\r\n        case \"SN/auth/SET_USER_DATA\":\r\n        case \"SN/auth/GET_CAPTCHA_URL_SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth:boolean) => ({\r\n        type: \"SN/auth/SET_USER_DATA\",\r\n        payload: { userId,  email,  login,  isAuth }\r\n    } as const),\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\r\n        type: \"SN/auth/GET_CAPTCHA_URL_SUCCESS\",\r\n        payload: {captchaUrl}\r\n    } as const),\r\n}\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    let meData = await authAPI.me();\r\n\r\n    if(meData.resultCode === ResultCodesEnum.Success) {\r\n        let {id, email, login} = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true));\r\n    }\r\n};\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n    let data = await authAPI.login(email, password, rememberMe, captcha);\r\n\r\n    if(data.resultCode === ResultCodesEnum.Success) {\r\n        // success , get auth data\r\n        dispatch(getAuthUserData())\r\n    }  else {\r\n        if (data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl())\r\n        }\r\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n};\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    const data = await securityAPI.getCaptchaUrl();\r\n    const captchaUrl = data.data.url;\r\n\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl));\r\n};\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    let response = await authAPI.logout();\r\n\r\n    if(response.data.resultCode === 0 ) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false));\r\n    }\r\n};\r\n\r\nexport default authReducer;\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>;","import React, {Component} from \"react\"\r\nimport Header, {DispatchPropsType, MapPropsType} from \"./header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nclass HeaderContainer extends Component<MapPropsType & DispatchPropsType>{\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n})\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, {}, AppStateType>\r\n(mapStateToProps, {logout})(HeaderContainer);","import React, {FC} from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeys, Input} from \"../../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../../utils/Validators/validators\";\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string\r\n}\r\n\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>;\r\n\r\nconst LoginForm: FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({handleSubmit, error, captchaUrl}) => {\r\n   return (\r\n       <form onSubmit={handleSubmit}>\r\n           {createField<LoginFormValuesTypeKeys>(\"Email\", \"email\", [required], Input)}\r\n           {createField<LoginFormValuesTypeKeys>(\"Password\", \"password\", [required], Input, {type: \"password\"})}\r\n           {createField<LoginFormValuesTypeKeys>(undefined, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"remember me\")}\r\n           {captchaUrl && <img src={captchaUrl} alt={captchaUrl} /> }\r\n           {captchaUrl && createField<LoginFormValuesTypeKeys>(\"Symbols from image\", \"captcha\", [required], Input, {}) }\r\n           { error && <div className=\"form-summary-error\">\r\n               {error}\r\n           </div>}\r\n           <div>\r\n               <button>Login</button>\r\n           </div>\r\n       </form>\r\n   )\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm);\r\n\r\n\r\nexport default LoginReduxForm;","import React, {FC} from \"react\";\r\nimport \"./login.css\";\r\nimport LoginForm from \"./Sections/LoginForm\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {LoginFormValuesType} from \"./Sections/LoginForm\";\r\n\r\ntype MapStatePropsType = {\r\n    captchaUrl: string | null,\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\n\r\nconst Login: FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha);\r\n    };\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to=\"/profile\" />\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>login</h1>\r\n            <LoginForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default connect(mapStateToProps, {login})(Login);","import {getAuthUserData} from \"./auth-reducer\";\r\nimport {InferActionsTypes} from \"./redux-store\";\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case \"SN/APP/INITIALIZED_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: \"SN/APP/INITIALIZED_SUCCESS\"} as const)\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n\r\n    /*когда купишь апи встатвить код\r\n    *  promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccess());\r\n        });\r\n    * */\r\n\r\n    promise.then(() => {\r\n        dispatch(actions.initializedSuccess());\r\n    });\r\n};\r\n\r\nexport default appReducer;","let initialState = {\r\n    sidebar: {},\r\n}\r\ntype InitialState = typeof initialState;\r\n\r\nconst sidebarReducer = (state = initialState, action: any): InitialState => {\r\n\r\n    return state;\r\n};\r\n\r\nexport default sidebarReducer;","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth : authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;\r\n\r\nexport type AppStateType = ReturnType<RootReducerType>;\r\n\r\nexport type InferActionsTypes<T> = T extends {[key: string]: (...args: any[]) => infer U} ? U : never;\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>;\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n// @ts-ignore\r\nwindow.__store__ = store;\r\n\r\nexport default store;","import React, {ComponentType, Suspense} from \"react\";\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return (\r\n            <Suspense fallback={<h1>Loading profile...</h1>}>\r\n                <WrappedComponent {...props}/>\r\n            </Suspense>\r\n            )\r\n    }\r\n}","import React, {Component, ComponentType, FC, lazy} from \"react\";\r\nimport {\r\n    Switch,\r\n    Route, withRouter, BrowserRouter, Redirect\r\n} from 'react-router-dom';\r\nimport \"./App.css\";\r\nimport Menu from \"./components/Menu/menu\";\r\nimport UsersContainer from \"./components/Users/usersContainer\";\r\nimport HeaderContainer from \"./components/Header/headerContainer\";\r\nimport Login from \"./components/Login/Login\";\r\nimport {compose} from \"redux\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport Preloader from \"./components/common/Preloader/Preloader\";\r\nimport store, {AppStateType} from \"./redux/redux-store\";\r\nimport {withSuspense} from \"./hoc/withSuspence\";\r\n\r\nconst DialogsContainer = lazy(() => import('./components/Dialogs/dialogsContainer'));\r\nconst ProfileContainer = lazy(() => import('./components/Profile/profileContainer'));\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>;\r\ntype DispatchPropsType = {\r\n    initializeApp: () => void\r\n};\r\n\r\nconst SuspendedDialogs = withSuspense(DialogsContainer);\r\nconst SuspendedProfile = withSuspense(ProfileContainer);\r\n\r\nclass App extends Component<MapPropsType & DispatchPropsType> {\r\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\r\n        alert(\"Some error occured \");\r\n    }\r\n    componentDidMount() {\r\n        this.props.initializeApp();\r\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n    }\r\n\r\n    render() {\r\n\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n        return (\r\n            <div className=\"app__wrapper\">\r\n                <HeaderContainer />\r\n                <Menu/>\r\n                <div className=\"app__wrapper_content\">\r\n                    <Switch>\r\n                        <Route exact path=\"/\">\r\n                            {() => <Redirect to=\"/profile\" />}\r\n                        </Route>\r\n                        <Route path=\"/dialogs\">\r\n                            <SuspendedDialogs />\r\n                        </Route>\r\n                        <Route path=\"/profile/:userId?\">\r\n                            <SuspendedProfile />\r\n                        </Route>\r\n                        <Route path=\"/users\">\r\n                            <UsersContainer pageTitle=\"Page Title\" />\r\n                        </Route>\r\n                        <Route path=\"/login\">\r\n                            <Login />\r\n                        </Route>\r\n                        <Route path=\"*\">\r\n                            <div>404 NOT FOUND</div>\r\n                        </Route>\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    initialized: state.app.initialized\r\n});\r\n\r\nconst AppContainer =  compose<ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp}))(App);;\r\n\r\nconst SamuraiJSApp: FC = () => {\r\n    return <BrowserRouter>\r\n        <Provider store={store}>\r\n            <AppContainer />\r\n        </Provider>\r\n    </BrowserRouter>\r\n};\r\n\r\nexport default SamuraiJSApp;","import reportWebVitals from './reportWebVitals';\r\nimport ReactDOM from \"react-dom\";\r\nimport React from \"react\";\r\nimport SamuraiJSApp from \"./App\";\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <SamuraiJSApp/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","export type FieldValidatorType = (value: string) => string | undefined;\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n};","export default __webpack_public_path__ + \"static/media/preloader.d7e7d5d0.svg\";","import React, {FC} from \"react\";\r\nimport preloader from \"../../../assets/images/preloader.svg\";\r\n\r\nconst Preloader: FC = () => {\r\n    return (\r\n        <div>\r\n            <img src={preloader} alt=\"Preloader\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Preloader;","import {profileAPI} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from 'redux-form';\r\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\n\r\nlet initialState = {\r\n    postsData: [\r\n        {\r\n            id: 1,\r\n            message: \"Hi, who are u?\",\r\n            likes: 12\r\n        },\r\n        {\r\n            id: 2,\r\n            message: \"Hi, who are u Doe?\",\r\n            likes: 1\r\n        },\r\n        {\r\n            id: 3,\r\n            message: \"Hi, who are John?\",\r\n            likes: 129\r\n        }\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n};\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/PROFILE/ADD_POST\": {\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likes: 0,\r\n            };\r\n            return {\r\n                ...state,\r\n                postsData: [...state.postsData, newPost],\r\n            }\r\n        }\r\n\r\n        case \"SN/PROFILE/SET_USER_PROFILE\": {\r\n            return  {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n        }\r\n\r\n        case \"SN/PROFILE/SET_STATUS\": {\r\n            return  {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        }\r\n\r\n        case \"SN/PROFILE/DELETE_POST\": {\r\n            return  {\r\n                ...state,\r\n                postsData: state.postsData.filter(p => p.id !== action.postId)\r\n            };\r\n        }\r\n\r\n        case \"SN/PROFILE/SAVE_PHOTO_SUCCESS\": {\r\n            return  {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos} as ProfileType\r\n            };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    addPostActionCreator: (newPostText: string) => ({\r\n        type: \"SN/PROFILE/ADD_POST\",\r\n        newPostText\r\n    } as const),\r\n    setUserProfile: (profile: ProfileType) => ({\r\n        type: \"SN/PROFILE/SET_USER_PROFILE\",\r\n        profile\r\n    } as const),\r\n\r\n    setStatus: (status: string) => ({\r\n        type: \"SN/PROFILE/SET_STATUS\",\r\n        status\r\n    } as const),\r\n\r\n    deletePost: (postId: number) => ({\r\n        type: \"SN/PROFILE/DELETE_POST\",\r\n        postId\r\n    } as const),\r\n\r\n    savePhotoSuccess: (photos: PhotosType) => ({\r\n        type: \"SN/PROFILE/SAVE_PHOTO_SUCCESS\",\r\n        photos\r\n    } as const),\r\n}\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getProfile(userId);\r\n\r\n    dispatch(actions.setUserProfile(data));\r\n};\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getStatus(userId);\r\n    dispatch(actions.setStatus(data));\r\n};\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        const data = await profileAPI.updateStatus(status);\r\n        if (data.resultCode === 0) dispatch(actions.setStatus(status));\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n};\r\n\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    const data = await  profileAPI.savePhoto(file);\r\n    if (data.resultCode === 0) dispatch(actions.savePhotoSuccess(data.data.photos));\r\n};\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId;\r\n    const data = await  profileAPI.saveProfile(profile);\r\n    if (data.resultCode === 0) {\r\n        if(userId != null) {\r\n            dispatch(getUserProfile(userId));\r\n        } else {\r\n            throw new Error(\"userId can't be null\");\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0] }));\r\n        // dispatch(stopSubmit(\"edit-profile\", {\"contacts\": {\"facebook\": response.data.message[0]} }));\r\n        return Promise.reject(data.messages[0]);\r\n    }\r\n};\r\n\r\nexport default profileReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>;"],"sourceRoot":""}