{"version":3,"sources":["pages/Chat/ChatPage.tsx"],"names":["Message","message","src","photo","alt","style","width","userName","Messages","wsChannel","useState","messages","setMassages","useEffect","messageHandler","e","newMessages","JSON","parse","data","prevMessages","addEventListener","removeEventListener","height","overflowY","map","m","index","AddMessageForm","setMessage","readyStatus","setReadyStatus","openHandler","onChange","currentTarget","value","disabled","onClick","send","Chat","setWsChannel","ws","closeHandler","console","log","setTimeout","createChanel","close","WebSocket","ChatPage"],"mappings":"+JAUMA,EAA0C,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAE/C,OACI,gCACI,qBAAKC,IAAKD,EAAQE,MAAOC,IAAI,SAASC,MAAO,CAAEC,MAAO,UACtD,4BAAIL,EAAQM,WACZ,uBACA,4BACKN,EAAQA,UAEb,2BAKNO,EAAgD,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACrD,EAAgCC,mBAA4B,IAA5D,mBAAOC,EAAP,KAAiBC,EAAjB,KAeA,OAbAC,qBAAU,WACN,IAAMC,EAAiB,SAACC,GACpB,IAAIC,EAAcC,KAAKC,MAAMH,EAAEI,MAC/BP,GAAY,SAACQ,GAAD,4BAAsBA,GAAtB,YAAuCJ,QAKvD,OAFS,OAATP,QAAS,IAATA,KAAWY,iBAAiB,UAAWP,GAEhC,WACM,OAATL,QAAS,IAATA,KAAWa,oBAAoB,UAAWR,MAE/C,CAACL,IAGA,qBAAKJ,MAAO,CAAEkB,OAAQ,QAASC,UAAW,QAA1C,SACKb,EAASc,KAAI,SAACC,EAAGC,GAAJ,OAAsB,cAAC3B,EAAD,CAAqBC,QAASyB,GAAhBC,SAKxDC,EAAsD,SAAC,GAAmB,IAAjBnB,EAAgB,EAAhBA,UAC3D,EAA8BC,mBAAS,IAAvC,mBAAOT,EAAP,KAAgB4B,EAAhB,KACA,EAAsCnB,mBAA8B,WAApE,mBAAOoB,EAAP,KAAoBC,EAApB,KAEAlB,qBAAU,WACN,IAAMmB,EAAc,WAChBD,EAAe,UAKnB,OAFS,OAATtB,QAAS,IAATA,KAAWY,iBAAiB,OAAQW,GAE7B,WACM,OAATvB,QAAS,IAATA,KAAWa,oBAAoB,OAAQU,MAE5C,CAACvB,IAUJ,OACI,iDAEI,8BACI,0BAAUwB,SAAU,SAAClB,GAAD,OAAOc,EAAWd,EAAEmB,cAAcC,QAAQA,MAAOlC,MAEzE,8BACI,cAAC,IAAD,CAAQmC,SAAwB,OAAd3B,GAAsC,UAAhBqB,EAAyBO,QAfzD,WACXpC,IAGI,OAATQ,QAAS,IAATA,KAAW6B,KAAKrC,GAChB4B,EAAW,MAUH,wBAMVU,EAAW,WACb,MAAkC7B,mBAA2B,MAA7D,mBAAOD,EAAP,KAAkB+B,EAAlB,KA2BA,OAzBA3B,qBAAU,WACN,IAAI4B,EAEEC,EAAe,WACjBC,QAAQC,IAAI,YACZC,WAAWC,EAAc,MAG7B,SAASA,IAAgB,IAAD,IAClB,QAAF,EAAAL,SAAA,SAAInB,oBAAoB,QAAUoB,GAChC,QAAF,EAAAD,SAAA,SAAIM,SAEJN,EAAK,IAAIO,UAAU,iEAChB3B,iBAAiB,QAASqB,GAC7BF,EAAaC,GAKjB,OAFAK,IAEO,WACHL,EAAGnB,oBAAoB,QAASoB,GAChCD,EAAGM,WAET,IAGE,gCACI,cAACvC,EAAD,CAAUC,UAAWA,IACrB,cAACmB,EAAD,CAAgBnB,UAAWA,QAaxBwC,UARM,WACjB,OACI,8BACI,cAACV,EAAD","file":"static/js/5.1b042f0f.chunk.js","sourcesContent":["import { Button } from \"antd\";\r\nimport React, {FC, useEffect, useState} from \"react\";\r\n\r\ntype ChatMessageType = {\r\n    message: string,\r\n    photo: string,\r\n    userId: number,\r\n    userName: string,\r\n}\r\n\r\nconst Message: FC<{message: ChatMessageType}> = ({ message }) => {\r\n\r\n    return (\r\n        <div>\r\n            <img src={message.photo} alt=\"avatar\" style={{ width: '30px' }} />\r\n            <b>{message.userName}</b>\r\n            <br/>\r\n            <p>\r\n                {message.message}\r\n            </p>\r\n            <hr/>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst Messages: FC<{ wsChannel: WebSocket | null }> = ({ wsChannel }) => {\r\n    const [messages, setMassages] = useState<ChatMessageType[]>([]);\r\n\r\n    useEffect(() => {\r\n        const messageHandler = (e: MessageEvent) => {\r\n            let newMessages = JSON.parse(e.data);\r\n            setMassages((prevMessages) => [...prevMessages, ...newMessages]);\r\n        };\r\n\r\n        wsChannel?.addEventListener('message', messageHandler);\r\n\r\n        return () => {\r\n            wsChannel?.removeEventListener('message', messageHandler);\r\n        }\r\n    }, [wsChannel]);\r\n\r\n    return (\r\n        <div style={{ height: '400px', overflowY: 'auto' }}>\r\n            {messages.map((m, index: number) => <Message key={index} message={m} />)}\r\n        </div>\r\n    )\r\n};\r\n\r\nconst AddMessageForm: FC<{ wsChannel: WebSocket | null }> = ({ wsChannel }) => {\r\n    const [message, setMessage] = useState('');\r\n    const [readyStatus, setReadyStatus] = useState<\"pending\" | \"ready\">(\"pending\");\r\n\r\n    useEffect(()=> {\r\n        const openHandler = () => {\r\n            setReadyStatus('ready');\r\n        };\r\n\r\n        wsChannel?.addEventListener('open', openHandler);\r\n\r\n        return () => {\r\n            wsChannel?.removeEventListener('open', openHandler);\r\n        }\r\n    }, [wsChannel]);\r\n\r\n    const sendMessage = () => {\r\n        if (!message) {\r\n            return;\r\n        }\r\n        wsChannel?.send(message);\r\n        setMessage('');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            AddMessageForm\r\n            <div>\r\n                <textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message} />\r\n            </div>\r\n            <div>\r\n                <Button disabled={wsChannel === null || readyStatus !== \"ready\"} onClick={sendMessage}>Send</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst Chat: FC = () => {\r\n    const [wsChannel, setWsChannel] = useState<WebSocket | null>(null);\r\n\r\n    useEffect(() => {\r\n        let ws: WebSocket;\r\n\r\n        const closeHandler = () => {\r\n            console.log('close WS');\r\n            setTimeout(createChanel, 3000);\r\n        }\r\n\r\n        function createChanel() {\r\n            ws?.removeEventListener('close' , closeHandler);\r\n            ws?.close();\r\n\r\n            ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx');\r\n            ws.addEventListener('close', closeHandler);\r\n            setWsChannel(ws);\r\n        }\r\n\r\n        createChanel();\r\n\r\n        return () => {\r\n            ws.removeEventListener('close', closeHandler);\r\n            ws.close();\r\n        };\r\n    },[]);\r\n\r\n    return (\r\n        <div>\r\n            <Messages wsChannel={wsChannel} />\r\n            <AddMessageForm wsChannel={wsChannel} />\r\n        </div>\r\n    )\r\n};\r\n\r\nconst ChatPage: FC = () => {\r\n    return (\r\n        <div>\r\n            <Chat />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ChatPage;"],"sourceRoot":""}