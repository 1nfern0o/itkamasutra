{"version":3,"sources":["api/api.ts","redux/dialogs-reducer.ts","components/common/FormsControls/FormsControls.tsx","reportWebVitals.js","components/Menu/menu.jsx","utils/object-helpers.js","redux/users-reducer.ts","components/common/Paginator/Paginator.tsx","components/Users/user.jsx","components/Users/users.tsx","redux/users-selectors.ts","components/Users/usersContainer.tsx","components/Header/header.jsx","redux/auth-reducer.ts","components/Header/headerContainer.jsx","components/Login/Sections/LoginForm.tsx","components/Login/Login.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","hoc/withSuspence.js","App.js","index.js","utils/Validators/validators.ts","assets/images/preloader.svg","components/common/Preloader/Preloader.js","redux/profile-reducer.ts"],"names":["ResultCodesEnum","ResultCodeForCaptcha","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","userId","post","unfollow","delete","getProfile","console","warn","profileAPI","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","saveProfile","profile","authAPI","me","res","login","email","password","rememberMe","captcha","logout","securityAPI","getCaptchaUrl","SEND_MESSAGE","initialState","dialogsData","id","name","messagesData","message","sendMessageCreator","newMessageBody","type","dialogsReducer","state","action","body","FormControl","meta","touched","error","children","hasError","className","Textarea","props","input","restProps","Input","createField","placeholder","validators","component","text","validate","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Menu","to","updateObjectInArray","items","itemId","objPropName","newObjProps","map","user","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","toggleIsFetching","toggleFollowingProgress","_followUnfollowFlow","dispatch","apiMethod","actionCreator","a","resultCode","usersReducer","count","filter","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","onClick","p","User","src","photos","small","alt","followed","disabled","some","fullName","Users","createSelector","usersPage","u","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","pageNumber","requestUsers","this","pageTitle","Preloader","Component","compose","connect","bind","page","getState","totalCount","Header","isAuth","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","captchaUrl","setAuthUserData","payload","getCaptchaUrlSuccess","getAuthUserData","meData","Success","url","authReducer","HeaderContainer","auth","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","required","undefined","CaptchaIsRequired","messages","length","stopSubmit","_error","INITIALIZED_SUCCESS","initialized","appReducer","sidebar","sidebarReducer","rootReducer","combineReducers","profilePage","profileReducer","dialogsPage","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","__store__","withSuspense","fallback","DialogsContainer","lazy","ProfileContainer","App","catchAllUnhandledErrors","reason","promise","alert","log","initializeApp","addEventListener","removeEventListener","exact","path","AppContainer","withRouter","SamuraiJSApp","ReactDOM","render","StrictMode","document","getElementById","value","maxLengthCreator","maxLength","preloader","ADD_POST","SET_USER_PROFILE","SET_STATUS","DELETE_POST","SAVE_PHOTO_SUCCESS","postsData","likes","newPostText","addPostActionCreator","setStatus","getUserProfile","resutCode","file","date","Promise","reject","newPost","postId"],"mappings":"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","file":"static/js/main.97aaf66e.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport {ProfileType} from \"../types/types\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"c4158ed8-d0fa-48f5-978e-b07ad1bf0132\"\r\n    }\r\n});\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`).then(response => response.data);\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post(`follow/${userId}`)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n    getProfile(userId: number) {\r\n        console.warn(\"Obsolete method. Please profileAPI object.\")\r\n        return profileAPI.getProfile(userId);\r\n    }\r\n};\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get(`profile/${userId}`);\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get(`profile/status/${userId}`);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status/`, {status});\r\n    },\r\n    savePhoto(photoFile: any) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile);\r\n        return instance.put(`profile/status/`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        });\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put(`profile`, profile);\r\n    }\r\n};\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport enum ResultCodeForCaptcha {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\ntype MeResponseType = {\r\n    data: {\r\n        id: number,\r\n        email: string,\r\n        login: string\r\n    },\r\n    resultCode: ResultCodesEnum,\r\n    messages: Array<string>\r\n}\r\n\r\ntype LoginResponseType = {\r\n    data: {\r\n        userId: number\r\n    },\r\n    resultCode: ResultCodesEnum | ResultCodeForCaptcha,\r\n    messages: Array<string>\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<MeResponseType>(`auth/me`).then(res => res.data);\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<LoginResponseType>(`auth/login`, {email, password, rememberMe, captcha})\r\n            .then(res => res.data);\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    }\r\n};\r\n\r\nauthAPI.me().then((res) => res.data);\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get(`security/get-captcha-url`);\r\n    }\r\n};","const SEND_MESSAGE = \"SEND_MESSAGE\";\r\n\r\ntype DialogType = {\r\n    id: number,\r\n    name: string\r\n};\r\n\r\ntype MessageType = {\r\n    id: number,\r\n    message: string\r\n}\r\n\r\nlet initialState = {\r\n    dialogsData: [\r\n        {\r\n            id: 1,\r\n            name: \"Roman\"\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Dimych\"\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Petro\"\r\n        },\r\n        {\r\n            id: 4,\r\n            name: \"Andrey\"\r\n        }\r\n    ] as Array<DialogType>,\r\n    messagesData: [\r\n        {\r\n            id: 1,\r\n            message: \"Hi world!\"\r\n        },\r\n        {\r\n            id: 2,\r\n            message: \"Hi wrld!\"\r\n        },\r\n        {\r\n            id: 3,\r\n            message: \"Yo\"\r\n        }\r\n    ] as Array<MessageType>\r\n}\r\n\r\nexport type initialStateType = typeof initialState;\r\n\r\nconst dialogsReducer = (state = initialState, action: any): initialStateType => {\r\n    switch (action.type) {\r\n        case SEND_MESSAGE: {\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messagesData: [...state.messagesData, {id: 6, message: body}],\r\n\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype sendMessageCreatorType = {\r\n    type: typeof SEND_MESSAGE,\r\n    newMessageBody: string\r\n}\r\n\r\nexport const sendMessageCreator = (newMessageBody: string):sendMessageCreatorType => ({\r\n    type: SEND_MESSAGE,\r\n    newMessageBody\r\n});\r\n\r\nexport default dialogsReducer;","import React, {FC} from \"react\";\r\nimport \"./FormsControls.css\";\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport {FieldValidatorType} from \"../../../utils/Validators/validators\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={`form-control ${hasError ? \"error\" : \"\"}`}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <div>\r\n                {hasError && <span>{error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: FC<WrappedFieldProps> = (props) => {\r\n    // const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return (\r\n        <FormControl {...props}>\r\n            <textarea {...input} {...restProps} />\r\n        </FormControl>\r\n    )\r\n};\r\n\r\nexport const Input: FC<WrappedFieldProps> = (props) => {\r\n    // const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return (\r\n        <FormControl {...props}>\r\n            <input {...input} {...restProps} />\r\n        </FormControl>\r\n    )\r\n};\r\n\r\nexport function createField<FormKeysType extends string>(\r\n        placeholder: string | undefined,\r\n        name: FormKeysType,\r\n        validators: Array<FieldValidatorType>,\r\n        component: FC<WrappedFieldProps>,\r\n        props = {},\r\n        text = \"\"\r\n    ){\r\n        return (\r\n            <div>\r\n                <Field placeholder={placeholder}\r\n                       name={name}\r\n                       validate={validators}\r\n                       component={component}\r\n                       {...props}/>{text}\r\n            </div>\r\n        )\r\n    }","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport \"./menu.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Menu = () => {\r\n    return (\r\n        <nav className=\"menu\">\r\n            <ul className=\"menu__list\">\r\n                <li>\r\n                    <NavLink to=\"/profile\" className=\"menu__item-link\">Profile</NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink to=\"/dialogs\" className=\"menu__item-link\">Messages</NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink to=\"/users\" className=\"menu__item-link\">Users</NavLink>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Menu;","export const updateObjectInArray = (items, itemId, objPropName, newObjProps) => {\r\n    return items.map(user => {\r\n        if (user[objPropName] === itemId.userId) {\r\n            return {...user, ...newObjProps}\r\n        }\r\n        return user;\r\n    })\r\n};","import {usersAPI} from \"../api/api\";\r\nimport {updateObjectInArray} from \"../utils/object-helpers\";\r\nimport {UserType} from \"../types/types\";\r\nimport {AppStateType} from \"./redux-store\";\r\nimport { Dispatch } from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\n\r\nconst FOLLOW = \"FOLLOW\";\r\nconst UNFOLLOW = \"UNFOLLOW\";\r\nconst SET_USERS = \"SET_USERS\";\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\r\nconst SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\";\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\";\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = \"TOGGLE_IS_FOLLOWING_PROGRESS\";\r\n\r\n\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>, // array of users ids\r\n};\r\n\r\ntype InitialState = typeof initialState;\r\n\r\ntype ActionsTypes = FollowSuccessActionType |\r\n    UnfollowSuccessActionType |\r\n    SetUsersActionType |\r\n    SetCurrentPageActionType |\r\n    SetTotalUsersCountActionType |\r\n    ToggleIsFetchingActionType |\r\n    ToggleFollowingProgressActionType;\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialState => {\r\n    switch (action.type) {\r\n        case FOLLOW: {\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {follow: true} )\r\n                // users: state.users.map( user => {\r\n                //     if (user.id === action.userId) {\r\n                //         return {\r\n                //             ...user,\r\n                //             followed: true\r\n                //         }\r\n                //     }\r\n                //     return user;\r\n                // }),\r\n            }\r\n        }\r\n\r\n        case UNFOLLOW: {\r\n            return  {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {follow: false} )\r\n            };\r\n        }\r\n\r\n        case SET_USERS: {\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        }\r\n\r\n        case SET_CURRENT_PAGE: {\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        }\r\n\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.count\r\n            }\r\n        }\r\n\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype FollowSuccessActionType = {\r\n    type: typeof FOLLOW,\r\n    userId: number\r\n};\r\nexport const followSuccess = (userId: number): FollowSuccessActionType => ({\r\n    type: FOLLOW,\r\n    userId\r\n});\r\n\r\ntype UnfollowSuccessActionType = {\r\n    type: typeof UNFOLLOW,\r\n    userId: number\r\n};\r\nexport const unfollowSuccess = (userId: number): UnfollowSuccessActionType => ({\r\n    type: UNFOLLOW,\r\n    userId\r\n});\r\n\r\ntype SetUsersActionType = {\r\n    type: typeof SET_USERS,\r\n    users: Array<UserType>\r\n};\r\nexport const setUsers = (users: Array<UserType>): SetUsersActionType => ({\r\n    type: SET_USERS,\r\n    users\r\n});\r\n\r\ntype SetCurrentPageActionType = {\r\n    type: typeof SET_CURRENT_PAGE,\r\n    currentPage: number\r\n};\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageActionType => ({\r\n    type: SET_CURRENT_PAGE,\r\n    currentPage\r\n});\r\n\r\ntype SetTotalUsersCountActionType = {\r\n    type: typeof SET_TOTAL_USERS_COUNT,\r\n    count: number\r\n};\r\nexport const setTotalUsersCount = (totalUsersCount: number): SetTotalUsersCountActionType => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    count: totalUsersCount\r\n});\r\n\r\ntype ToggleIsFetchingActionType = {\r\n    type: typeof TOGGLE_IS_FETCHING,\r\n    isFetching: boolean\r\n};\r\nexport const toggleIsFetching = (isFetching: boolean): ToggleIsFetchingActionType => ({\r\n    type: TOGGLE_IS_FETCHING,\r\n    isFetching\r\n});\r\n\r\ntype ToggleFollowingProgressActionType = {\r\n    type: typeof TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching: boolean,\r\n    userId: number\r\n};\r\n\r\n\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number): ToggleFollowingProgressActionType => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching,\r\n    userId\r\n});\r\n\r\ntype DispatchType = Dispatch<ActionsTypes>;\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>;\r\n\r\nexport const requestUsers =\r\n    (page: number, pageSize: number): ThunkType =>\r\n    async (dispatch, getState) => {\r\n    dispatch(toggleIsFetching(true));\r\n    dispatch(setCurrentPage(page));\r\n\r\n    let response = await usersAPI.getUsers(page, pageSize);\r\n\r\n    dispatch(toggleIsFetching(false));\r\n    dispatch(setUsers(response.items));\r\n    dispatch(setTotalUsersCount(response.totalCount));\r\n};\r\n\r\nconst _followUnfollowFlow = async (\r\n    dispatch: DispatchType, userId: number, apiMethod: any,\r\n    actionCreator: (userId: number) => FollowSuccessActionType | UnfollowSuccessActionType) => {\r\n\r\n    dispatch(toggleFollowingProgress(true, userId));\r\n    let response = await apiMethod(userId);\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => async (dispatch) => {\r\n    _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess);\r\n};\r\n\r\nexport const unfollow = (userId: number): ThunkType => async (dispatch) => {\r\n    _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess);\r\n};\r\n\r\nexport default usersReducer;","import React, { useState, FC } from \"react\";\r\nimport \"./Paginator.css\";\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number,\r\n    currentPage: number,\r\n    onPageChanged: (pageNumber: number) => void,\r\n    pageSize: number,\r\n    portionSize?: number\r\n}\r\n\r\nconst Paginator: FC<PropsType> = ({ totalItemsCount, currentPage, onPageChanged, pageSize, portionSize = 10 }) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages: Array<number> = [];\r\n\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return (\r\n        <div className=\"paginator\">\r\n            {portionNumber > 1 &&\r\n                <button onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</button>}\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map((p) => (\r\n                    <span className={`${(currentPage === p ?\"user__page-select\": \"\")} user__page-number`}\r\n                          key={p}\r\n                          onClick={() => { onPageChanged(p) }}>{p}</span>\r\n                ))\r\n            }\r\n            {portionCount > portionNumber &&\r\n            <button onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</button>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Paginator;","import React from \"react\";\r\nimport \"./users.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst User = ({user, followingInProgress, unfollow, follow}) => {\r\n    return (\r\n            <div className=\"user\">\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={\"/profile/\" + user.id}>\r\n                            <img className=\"user__avatar\" src={`${user.photos.small != null ? user.photos.small : \"https://images.pexels.com/photos/1312023/pexels-photo-1312023.jpeg?cs=srgb&dl=pexels-michael-morse-1312023.jpg&fm=jpg\"}`} alt=\"\"/>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        { user.followed\r\n                            ? <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                      onClick={ () => { unfollow(user.id); }}>UnFollow</button>\r\n                            :  <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                       onClick={ () => { follow(user.id); }}>Follow</button>}\r\n                    </div>\r\n                </span>\r\n                <span>\r\n                    <span>\r\n                        <div>{user.fullName}</div>\r\n                        <div>{user.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{user.id}</div>\r\n                        <div>{`user.location.country`}</div>\r\n                        <div>{`user.location.city`}</div>\r\n                    </span>\r\n                </span>\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default User;","import React, { FC } from \"react\";\r\nimport \"./users.css\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./user\";\r\nimport {UserType} from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    currentPage: number,\r\n    onPageChanged: (pageNumber: number) => void,\r\n    totalUsersCount: number,\r\n    pageSize: number,\r\n    users: Array<UserType>,\r\n    followingInProgress: Array<number>,\r\n    unfollow: (userId: number) => void,\r\n    follow: (userId: number) => void\r\n}\r\n\r\nconst Users: FC<PropsType> = ({\r\n                                  currentPage,\r\n                                  onPageChanged,\r\n                                  totalUsersCount,\r\n                                  pageSize,\r\n                                  users,\r\n                                  followingInProgress,\r\n                                  unfollow,\r\n                                  follow,\r\n                                  ...props\r\n}) => {\r\n    return (\r\n        <div>\r\n            <Paginator currentPage={currentPage}\r\n                       onPageChanged={onPageChanged}\r\n                       totalItemsCount={totalUsersCount}\r\n                       pageSize={pageSize}/>\r\n            <div>\r\n                {users.map(user => (\r\n                    <User user={user}\r\n                         followingInProgress={followingInProgress}\r\n                         follow={follow}\r\n                         unfollow={unfollow}\r\n                         key={user.id}\r\n                     />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Users;","import { createSelector } from \"reselect\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nexport const getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users.filter(u => true);\r\n};\r\n\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n    return users.filter(u => true);\r\n});\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n};\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n};\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n};\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n};\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n};\r\n\r\nexport const countSomethingDifficult = (state: AppStateType) => {\r\n    debugger;\r\n    //for...math... big array\r\n    let count = 12;\r\n    return count;\r\n};","import React, {Component} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    follow,\r\n    unfollow,\r\n    requestUsers\r\n} from \"../../redux/users-reducer\";\r\nimport Users from \"./users\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getUsers,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getCurrentPage,\r\n    getIsFetching,\r\n    getFollowingInProgress\r\n} from \"../../redux/users-selectors\";\r\nimport {UserType} from \"../../types/types\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    currentPage: number,\r\n    pageSize: number,\r\n    isFetching: boolean,\r\n    totalUsersCount: number,\r\n    users: Array<UserType>,\r\n    followingInProgress: Array<number>,\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    unfollow: (userId: number) => void,\r\n    follow: (userId: number) => void,\r\n    requestUsers: (currentPage: number, pageSize: number) => void,\r\n}\r\n\r\ntype OwnPropsType = {\r\n    pageTitle: string\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType;\r\n\r\nclass UsersContainer extends Component<PropsType> {\r\n    componentDidMount() {\r\n        const {currentPage, pageSize} = this.props;\r\n        this.props.requestUsers(currentPage, pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        const {pageSize} = this.props;\r\n        this.props.requestUsers(pageNumber, pageSize);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <h2>{this.props.pageTitle}</h2>\r\n                {this.props.isFetching ? <Preloader /> : null}\r\n                <Users totalUsersCount={this.props.totalUsersCount}\r\n                                  pageSize={this.props.pageSize}\r\n                                  currentPage={this.props.currentPage}\r\n                                  onPageChanged={this.onPageChanged}\r\n                                  users={this.props.users}\r\n                                  follow={this.props.follow}\r\n                                  unfollow={this.props.unfollow}\r\n                                  followingInProgress={this.props.followingInProgress} />\r\n            </>\r\n        );\r\n    };\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    };\r\n};\r\n\r\nexport default compose(\r\n    connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(\r\n        mapStateToProps,\r\n        {follow, unfollow, requestUsers})\r\n)(UsersContainer);","import React from \"react\"\r\nimport \"./header.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <header className=\"header\">\r\n            <img className=\"logo\" src=\"https://image.neoseo.com.ua/image/catalog/foto_statti/topsovetovposozdanijubesplatnogologotipadljasajta/logo-design.png\" alt=\"Logo header\"/>\r\n            <div className=\"login-block\">\r\n                {props.isAuth\r\n                    ? <div>{props.login} - <button onClick={props.logout}>Log out</button></div>\r\n                    : <NavLink className=\"login-block__link\" to={\"/login\"}>Login</NavLink>\r\n                }\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import {authAPI, ResultCodeForCaptcha, ResultCodesEnum, securityAPI} from '../api/api';\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USER_DATA = \"samurai-network/auth/SET_USER_DATA\";\r\nconst GET_CAPTCHA_URL_SUCCESS = \"samurai-network/auth/GET_CAPTCHA_URL_SUCCESS\";\r\n\r\nlet initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null // if null , then captcha is not required\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\n\r\nconst authReducer = (state = initialState, action: any): initialStateType => {\r\n    switch (action.type) {\r\n\r\n        case SET_USER_DATA:\r\n        case GET_CAPTCHA_URL_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype SetAuthUserDaraActionPayloadType = {\r\n    userId: number | null, email: string | null, login: string | null, isAuth:boolean\r\n}\r\n\r\ntype SetAuthUserDaraActionType = {\r\n    type: typeof SET_USER_DATA,\r\n    payload: SetAuthUserDaraActionPayloadType\r\n};\r\n\r\nexport const setAuthUserData = (userId: number | null, email: string | null, login: string | null, isAuth:boolean): SetAuthUserDaraActionType => ({\r\n    type: SET_USER_DATA,\r\n    payload: { userId,  email,  login,  isAuth }\r\n});\r\n\r\ntype GetCaptchaUrlSuccessActionType = {\r\n    type :typeof GET_CAPTCHA_URL_SUCCESS,\r\n    payload: { captchaUrl: string }\r\n\r\n}\r\n\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string): GetCaptchaUrlSuccessActionType => {\r\n    return{\r\n        type: GET_CAPTCHA_URL_SUCCESS,\r\n        payload: {captchaUrl}\r\n    }\r\n};\r\n\r\nexport const getAuthUserData = () => async (dispatch: any) => {\r\n    let meData = await authAPI.me();\r\n\r\n    if(meData.resultCode === ResultCodesEnum.Success ) {\r\n        let {id, email, login} = meData.data;\r\n        dispatch(setAuthUserData(id, email, login, true));\r\n    }\r\n};\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string) => async (dispatch: any) => {\r\n    let data = await authAPI.login(email, password, rememberMe, captcha);\r\n\r\n    if(data.resultCode === ResultCodesEnum.Success ) {\r\n        // success , get auth data\r\n        dispatch(getAuthUserData())\r\n    }  else {\r\n        if (data.resultCode === ResultCodeForCaptcha.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl())\r\n        }\r\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n};\r\n\r\nexport const getCaptchaUrl = () => async (dispatch: any) => {\r\n    const response = await securityAPI.getCaptchaUrl();\r\n    const captchaUrl = response.data.url;\r\n\r\n    dispatch(getCaptchaUrlSuccess(captchaUrl));\r\n};\r\n\r\nexport const logout = () => async (dispatch: any) => {\r\n    let response = await authAPI.logout();\r\n\r\n    if(response.data.resultCode === 0 ) {\r\n        dispatch(setAuthUserData(null, null, null, false));\r\n    }\r\n};\r\n\r\nexport default authReducer;","import React, {Component} from \"react\"\r\nimport Header from \"./header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\n\r\nclass HeaderContainer extends Component{\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer);","import React, {FC} from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../../utils/Validators/validators\";\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string\r\n}\r\n\r\ntype LoginFormValuesTypeKeys = Extract<keyof LoginFormValuesType, string> ;\r\n\r\nconst LoginForm: FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({handleSubmit, error, captchaUrl}) => {\r\n   return (\r\n       <form onSubmit={handleSubmit}>\r\n           {createField<LoginFormValuesTypeKeys>(\"Email\", \"email\", [required], Input)}\r\n           {createField<LoginFormValuesTypeKeys>(\"Password\", \"password\", [required], Input, {type: \"password\"})}\r\n           {createField<LoginFormValuesTypeKeys>(undefined, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"remember me\")}\r\n           {captchaUrl && <img src={captchaUrl} alt={captchaUrl} /> }\r\n           {captchaUrl && createField<LoginFormValuesTypeKeys>(\"Symbols from image\", \"captcha\", [required], Input, {}) }\r\n           { error && <div className=\"form-summary-error\">\r\n               {error}\r\n           </div>}\r\n           <div>\r\n               <button>Login</button>\r\n           </div>\r\n       </form>\r\n   )\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm);\r\n\r\n\r\nexport default LoginReduxForm;","import React, {FC} from \"react\";\r\nimport \"./login.css\";\r\nimport LoginForm from \"./Sections/LoginForm\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {LoginFormValuesType} from \"./Sections/LoginForm\";\r\n\r\ntype MapStatePropsType = {\r\n    captchaUrl: string | null,\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\n\r\nconst Login: FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha);\r\n    };\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to=\"/profile\" />\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>login</h1>\r\n            <LoginForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default connect(mapStateToProps, {login})(Login);","import {getAuthUserData} from \"./auth-reducer\";\r\n\r\nconst INITIALIZED_SUCCESS = \"INITIALIZED_SUCCESS\";\r\n\r\nexport type InitialStateType = {\r\n    initialized: boolean\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    initialized: false\r\n}\r\n\r\nconst appReducer = (state = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype InitializedSuccessActionType = {\r\n    type: typeof INITIALIZED_SUCCESS\r\n};\r\n\r\nexport const initializedSuccess = ():InitializedSuccessActionType => ({type: INITIALIZED_SUCCESS});\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n\r\n    /*когда купишь апи встатвить код\r\n    *  promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccess());\r\n        });\r\n    * */\r\n\r\n    promise.then(() => {\r\n        dispatch(initializedSuccess());\r\n    });\r\n};\r\n\r\nexport default appReducer;","let initialState = {\r\n    sidebar: {},\r\n}\r\ntype InitialState = typeof initialState;\r\n\r\nconst sidebarReducer = (state = initialState, action: any): InitialState => {\r\n\r\n    return state;\r\n};\r\n\r\nexport default sidebarReducer;","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth : authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;\r\n\r\nexport type AppStateType = ReturnType<RootReducerType>;\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n// @ts-ignore\r\nwindow.__store__ = store;\r\n\r\nexport default store;","import React, {Suspense} from \"react\";\r\n\r\nexport const withSuspense = (Component) => {\r\n    return (props) => {\r\n        return (\r\n            <Suspense fallback={<h1>Loading profile...</h1>}>\r\n                <Component {...props}/>\r\n            </Suspense>\r\n            )\r\n    }\r\n};","import React, {Component, lazy} from \"react\";\nimport {\n    Switch,\n    Route, withRouter, BrowserRouter, Redirect\n} from 'react-router-dom';\nimport \"./App.css\";\nimport Menu from \"./components/Menu/menu.jsx\";\nimport UsersContainer from \"./components/Users/usersContainer\";\nimport HeaderContainer from \"./components/Header/headerContainer\";\nimport Login from \"./components/Login/Login\";\nimport {compose} from \"redux\";\nimport {connect, Provider} from \"react-redux\";\nimport {initializeApp} from \"./redux/app-reducer\";\nimport Preloader from \"./components/common/Preloader/Preloader\";\nimport store from \"./redux/redux-store\";\nimport {withSuspense} from \"./hoc/withSuspence\";\n\nconst DialogsContainer = lazy(() => import('./components/Dialogs/dialogsContainer'));\nconst ProfileContainer = lazy(() => import('./components/Profile/profileContainer'));\n\nclass App extends Component {\n    catchAllUnhandledErrors = (reason, promise) => {\n        alert(\"Some error occured \");\n        console.log(\"reason\", reason);\n        console.log(\"promise\", promise);\n    }\n    componentDidMount() {\n        this.props.initializeApp();\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors);\n    }\n\n    render() {\n\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        return (\n            <div className=\"app__wrapper\">\n                <HeaderContainer />\n                <Menu/>\n                <div className=\"app__wrapper_content\">\n                    <Switch>\n                        <Route exact path=\"/\">\n                            {() => <Redirect to=\"/profile\" />}\n                        </Route>\n                        <Route path=\"/dialogs\">\n                            {withSuspense(DialogsContainer)}\n                        </Route>\n                        <Route path=\"/profile/:userId?\">\n                            {withSuspense(ProfileContainer)}\n                        </Route>\n                        <Route path=\"/users\">\n                            <UsersContainer pageTitle=\"Page Title\" />\n                        </Route>\n                        <Route path=\"/login\">\n                            <Login />\n                        </Route>\n                        <Route path=\"*\">\n                            <div>404 NOT FOUND</div>\n                        </Route>\n                    </Switch>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    initialized: state.app.initialized\n});\n\nconst AppContainer =  compose(\n    withRouter,\n    connect(mapStateToProps, {initializeApp}))(App);;\n\nconst SamuraiJSApp = (props) => {\n    return <BrowserRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </BrowserRouter>\n};\n\nexport default SamuraiJSApp;","import reportWebVitals from './reportWebVitals';\nimport ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport SamuraiJSApp from \"./App\";\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <SamuraiJSApp/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export type FieldValidatorType = (value: string) => string | undefined;\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n};","export default __webpack_public_path__ + \"static/media/preloader.3ad5b43f.svg\";","import React from \"react\";\r\nimport preloader from \"../../../assets/images/preloader.svg\";\r\n\r\nconst Preloader = (props) => {\r\n    return (\r\n        <div>\r\n            <img src={preloader} alt=\"Preloader\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Preloader;","import {profileAPI, usersAPI} from \"../api/api\";\r\nimport {stopSubmit} from 'redux-form';\r\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\r\n\r\nconst ADD_POST = \"ADD_POST\";\r\nconst SET_USER_PROFILE = \"SET_USER_PROFILE\";\r\nconst SET_STATUS = \"SET_STATUS\";\r\nconst DELETE_POST = \"DELETE_POST\";\r\nconst SAVE_PHOTO_SUCCESS = \"SAVE_PHOTO_SUCCESS\";\r\n\r\n\r\n\r\nlet initialState = {\r\n    postsData: [\r\n        {\r\n            id: 1,\r\n            message: \"Hi, who are u?\",\r\n            likes: 12\r\n        },\r\n        {\r\n            id: 2,\r\n            message: \"Hi, who are u Doe?\",\r\n            likes: 1\r\n        },\r\n        {\r\n            id: 3,\r\n            message: \"Hi, who are John?\",\r\n            likes: 129\r\n        }\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n    newPostText: ''\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst profileReducer = (state = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likes: 0,\r\n            };\r\n            return {\r\n                ...state,\r\n                postsData: [...state.postsData, newPost],\r\n                newPostText: \"\"\r\n            }\r\n        }\r\n\r\n        case SET_USER_PROFILE: {\r\n            return  {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n        }\r\n\r\n        case SET_STATUS: {\r\n            return  {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        }\r\n\r\n        case DELETE_POST: {\r\n            return  {\r\n                ...state,\r\n                postsData: state.postsData.filter(p => p.id !== action.postId)\r\n            };\r\n        }\r\n\r\n        case SAVE_PHOTO_SUCCESS: {\r\n            return  {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos} as ProfileType\r\n            };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype AddPostActionCreatorType = {\r\n    type: typeof ADD_POST,\r\n    newPostText: string\r\n};\r\nexport const addPostActionCreator = (newPostText: string): AddPostActionCreatorType => ({\r\n    type: ADD_POST,\r\n    newPostText\r\n});\r\n\r\ntype SetUserProfileType = {\r\n    type: typeof SET_USER_PROFILE,\r\n    profile: ProfileType\r\n};\r\nexport const setUserProfile = (profile: ProfileType): SetUserProfileType => ({\r\n    type: SET_USER_PROFILE,\r\n    profile\r\n});\r\n\r\ntype SetStatusType = {\r\n    type: typeof SET_STATUS,\r\n    status: string\r\n};\r\nexport const setStatus = (status: string): SetStatusType => ({\r\n    type: SET_STATUS,\r\n    status\r\n});\r\n\r\ntype DeletePostType = {\r\n    type: typeof DELETE_POST,\r\n    postId: number\r\n};\r\nexport const deletePost = (postId: number): DeletePostType => ({\r\n    type: DELETE_POST,\r\n    postId\r\n});\r\n\r\ntype SavePhotoSuccessType = {\r\n    type: typeof SAVE_PHOTO_SUCCESS,\r\n    photos: PhotosType\r\n};\r\nexport const savePhotoSuccess = (photos: PhotosType): SavePhotoSuccessType => ({\r\n    type: SAVE_PHOTO_SUCCESS,\r\n    photos\r\n});\r\n\r\n\r\nexport const getUserProfile = (userId: number) => async (dispatch: any) => {\r\n    const response = await usersAPI.getProfile(userId);\r\n    dispatch(setUserProfile(response.data));\r\n};\r\nexport const getStatus = (userId: number) => async (dispatch: any) => {\r\n    const response = await profileAPI.getStatus(userId);\r\n    dispatch(setStatus(response.data));\r\n};\r\n\r\nexport const updateStatus = (status: any) => async (dispatch: any) => {\r\n    try {\r\n        const response = await profileAPI.getProfile(status);\r\n        if (response.data.resutCode === 0) dispatch(setStatus(status));\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n\r\n};\r\n\r\nexport const savePhoto = (file: any) => async (dispatch: any) => {\r\n    const response = await  profileAPI.savePhoto(file);\r\n    if (response.data.resutCode === 0) dispatch(savePhotoSuccess(response.data.date.photos));\r\n};\r\n\r\nexport const saveProfile = (profile: ProfileType) => async (dispatch: any, getState: any) => {\r\n    const userId = getState().auth.userId;\r\n    const response = await  profileAPI.saveProfile(profile);\r\n    if (response.data.resutCode === 0) {\r\n        dispatch(getUserProfile(userId));\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: response.data.message[0] }));\r\n        // dispatch(stopSubmit(\"edit-profile\", {\"contacts\": {\"facebook\": response.data.message[0]} }));\r\n        return Promise.reject(response.data.message[0]);\r\n    }\r\n};\r\n\r\nexport default profileReducer;"],"sourceRoot":""}