{"version":3,"sources":["redux/dialogs-reducer.ts","api/api.ts","api/security-api.ts","api/profile-api.ts","api/users-api.ts","api/auth-api.ts","components/common/FormsControls/FormsControls.tsx","reportWebVitals.js","components/Menu/menu.tsx","redux/users-selectors.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/UsersSearchForm.tsx","utils/object-helpers.ts","redux/users-reducer.ts","components/Users/Users.tsx","components/Users/UsersPage.tsx","components/Header/header.tsx","redux/auth-reducer.ts","components/Header/headerContainer.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","hoc/withSuspence.tsx","components/Login/Sections/LoginForm.tsx","components/Login/LoginPage.tsx","App.tsx","index.tsx","utils/Validators/validators.ts","assets/images/preloader.svg","components/common/Preloader/Preloader.tsx","redux/profile-reducer.ts"],"names":["initialState","dialogsData","id","name","messagesData","message","actions","sendMessage","newMessageBody","type","dialogsReducer","state","action","body","ResultCodesEnum","ResultCodeForCaptchaEnum","securityAPI","getCaptchaUrl","instance","get","profileAPI","getProfile","userId","then","res","data","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","headers","saveProfile","profile","usersAPI","getUsers","currentPage","pageSize","term","friend","follow","post","unfollow","delete","authAPI","me","login","email","password","rememberMe","captcha","logout","axios","create","withCredentials","baseURL","FormControl","meta","touched","error","children","hasError","className","Textarea","props","input","restProps","Input","createField","placeholder","validators","component","text","validate","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Menu","to","createSelector","usersPage","users","filter","u","getPageSize","getTotalUsersCount","totalUsersCount","getCurrentPage","getIsFetching","isFetching","getFollowingInProgress","followingInProgress","getUsersFilter","Paginator","totalItemsCount","onPageChanged","x","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","onClick","p","map","User","user","src","photos","small","alt","followed","disabled","some","usersSearchFormValidate","values","UsersSearchForm","memo","initialValues","onSubmit","setSubmitting","onFilterChanged","isSubmitting","as","value","updateObjectInArray","items","itemId","objPropName","newObjProps","payload","count","requestUsers","page","dispatch","a","response","totalCount","usersReducer","Users","useSelector","useDispatch","useEffect","pageNumber","UsersPage","pageTitle","Preloader","Header","isAuth","captchaUrl","getAuthUserData","meData","resultCode","Success","url","authReducer","HeaderContainer","this","Component","connect","auth","initialized","appReducer","sidebar","sidebarReducer","rootReducer","combineReducers","profilePage","profileReducer","dialogsPage","form","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","withSuspense","WrappedComponent","fallback","LoginReduxForm","reduxForm","handleSubmit","required","undefined","LoginPage","CaptchaIsRequired","messages","length","stopSubmit","_error","DialogsContainer","lazy","ProfileContainer","SuspendedDialogs","SuspendedProfile","App","catchAllUnhandledErrors","e","alert","initializeApp","addEventListener","removeEventListener","exact","path","AppContainer","withRouter","SamuraiJSApp","ReactDOM","render","StrictMode","document","getElementById","maxLengthCreator","maxLength","preloader","postsData","likes","addPostActionCreator","newPostText","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","getUserProfile","console","log","file","getState","Error","Promise","reject","newPost"],"mappings":"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","file":"static/js/main.a7702782.chunk.js","sourcesContent":["import {InferActionsTypes} from \"./redux-store\";\r\n\r\ntype DialogType = {\r\n    id: number,\r\n    name: string\r\n};\r\n\r\ntype MessageType = {\r\n    id: number,\r\n    message: string\r\n}\r\n\r\nlet initialState = {\r\n    dialogsData: [\r\n        {\r\n            id: 1,\r\n            name: \"Roman\"\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Dimych\"\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Petro\"\r\n        },\r\n        {\r\n            id: 4,\r\n            name: \"Andrey\"\r\n        }\r\n    ] as Array<DialogType>,\r\n    messagesData: [\r\n        {\r\n            id: 1,\r\n            message: \"Hi world!\"\r\n        },\r\n        {\r\n            id: 2,\r\n            message: \"Hi wrld!\"\r\n        },\r\n        {\r\n            id: 3,\r\n            message: \"Yo\"\r\n        }\r\n    ] as Array<MessageType>\r\n}\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/DIALOGS/SEND_MESSAGE\": {\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messagesData: [...state.messagesData, {id: 6, message: body}],\r\n\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    sendMessage: (newMessageBody: string) => ({\r\n        type: \"SN/DIALOGS/SEND_MESSAGE\",\r\n        newMessageBody\r\n    } as const)\r\n}\r\n\r\n\r\nexport default dialogsReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\n","import axios from \"axios\";\r\nimport {securityAPI} from \"./security-api\";\r\nimport {profileAPI} from \"./profile-api\";\r\nimport {usersAPI} from \"./users-api\";\r\nimport {authAPI} from \"./auth-api\";\r\nimport {UserType} from \"../types/types\";\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"c4158ed8-d0fa-48f5-978e-b07ad1bf0132\"\r\n    }\r\n});\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport enum ResultCodeForCaptchaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\nexport {\r\n    securityAPI,\r\n    profileAPI,\r\n    usersAPI,\r\n    authAPI,\r\n}","import {instance} from \"./api\";\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`);\r\n    }\r\n};","import {PhotosType, ProfileType} from \"../types/types\";\r\nimport {instance, APIResponseType} from \"./api\";\r\n\r\ntype SavePhotosResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/${userId}`).then(res => res.data);\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/${userId}`).then(res => res.data);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status/`, {status}).then(res => res.data);\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile);\r\n        return instance.put<APIResponseType<SavePhotosResponseDataType>>(`profile/status/`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data);\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data);\r\n    }\r\n};","import { GetItemsType, instance, APIResponseType } from \"./api\";\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10, term: string = '', friend:null | boolean = null) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`)).then(res => res.data);\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data);\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>;\r\n    }\r\n};","import {instance, APIResponseType, ResultCodesEnum, ResultCodeForCaptchaEnum} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number,\r\n    email: string,\r\n    login: string\r\n}\r\n\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data);\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodeForCaptchaEnum | ResultCodesEnum>>(`auth/login`, {email, password, rememberMe, captcha})\r\n            .then(res => res.data);\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    }\r\n};","import React, {FC} from \"react\";\r\nimport \"./FormsControls.css\";\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport {FieldValidatorType} from \"../../../utils/Validators/validators\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={`form-control ${hasError ? \"error\" : \"\"}`}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <div>\r\n                {hasError && <span>{error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: FC<WrappedFieldProps> = (props) => {\r\n    // const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return (\r\n        <FormControl {...props}>\r\n            <textarea {...input} {...restProps} />\r\n        </FormControl>\r\n    )\r\n};\r\n\r\nexport const Input: FC<WrappedFieldProps> = (props) => {\r\n    // const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return (\r\n        <FormControl {...props}>\r\n            <input {...input} {...restProps} />\r\n        </FormControl>\r\n    )\r\n};\r\n\r\nexport function createField<FormKeysType extends string>(\r\n        placeholder: string | undefined,\r\n        name: FormKeysType,\r\n        validators: Array<FieldValidatorType>,\r\n        component: FC<WrappedFieldProps>,\r\n        props = {},\r\n        text = \"\"\r\n    ){\r\n        return (\r\n            <div>\r\n                <Field placeholder={placeholder}\r\n                       name={name}\r\n                       validate={validators}\r\n                       component={component}\r\n                       {...props}/>{text}\r\n            </div>\r\n        )\r\n    }\r\n\r\nexport type GetStringKeys<T> =  Extract<keyof T, string>;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {FC} from \"react\";\r\nimport \"./menu.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Menu: FC = () => {\r\n    return (\r\n        <nav className=\"menu\">\r\n            <ul className=\"menu__list\">\r\n                <li>\r\n                    <NavLink to=\"/profile\" className=\"menu__item-link\">Profile</NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink to=\"/dialogs\" className=\"menu__item-link\">Messages</NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink to=\"/users\" className=\"menu__item-link\">Users</NavLink>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Menu;","import { createSelector } from \"reselect\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nexport const getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users.filter(u => true);\r\n};\r\n\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n    return users.filter(u => true);\r\n});\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n};\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n};\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n};\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n};\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n};\r\n\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter;\r\n};","import React, { useState, FC } from \"react\";\r\nimport \"./Paginator.css\";\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number,\r\n    currentPage?: number,\r\n    onPageChanged?: (pageNumber: number) => void,\r\n    pageSize: number,\r\n    portionSize?: number\r\n}\r\n\r\nconst Paginator: FC<PropsType> = ({\r\n          totalItemsCount,\r\n          currentPage = 1,\r\n          onPageChanged = x => x,\r\n          pageSize,\r\n          portionSize = 10\r\n}) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages: Array<number> = [];\r\n\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return (\r\n        <div className=\"paginator\">\r\n            {portionNumber > 1 &&\r\n                <button onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</button>}\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map((p) => (\r\n                    <span className={`${(currentPage === p ?\"user__page-select\": \"\")} user__page-number`}\r\n                          key={p}\r\n                          onClick={() => { onPageChanged(p) }}>{p}</span>\r\n                ))\r\n            }\r\n            {portionCount > portionNumber &&\r\n            <button onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</button>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Paginator;","import React, {FC} from \"react\";\r\nimport \"./users.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport { UserType } from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\n\r\nconst User: FC<PropsType> = ({user, followingInProgress, unfollow, follow}) => {\r\n    return (\r\n            <div className=\"user\">\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={\"/profile/\" + user.id}>\r\n                            <img className=\"user__avatar\" src={`${user.photos.small != null ? user.photos.small : \"https://images.pexels.com/photos/1312023/pexels-photo-1312023.jpeg?cs=srgb&dl=pexels-michael-morse-1312023.jpg&fm=jpg\"}`} alt=\"\"/>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        { user.followed\r\n                            ? <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                      onClick={ () => { unfollow(user.id); }}>UnFollow</button>\r\n                            :  <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                       onClick={ () => { follow(user.id); }}>Follow</button>}\r\n                    </div>\r\n                </span>\r\n                <span>\r\n                    <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{user.id}</div>\r\n                        <div>{`user.location.country`}</div>\r\n                        <div>{`user.location.city`}</div>\r\n                    </span>\r\n                </span>\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default User;","import React, {FC, memo} from \"react\";\r\nimport {Field, Form, Formik} from \"formik\";\r\nimport {FilterType} from \"../../redux/users-reducer\";\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n    const errors = {};\r\n    return errors;\r\n};\r\n\r\ntype FormType = {\r\n    term: string,\r\n    friend: 'true' | 'false' | 'null'\r\n}\r\n\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void,\r\n};\r\n\r\nconst UsersSearchForm: FC<PropsType> = memo ((props) => {\r\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void } ) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\r\n        }\r\n        props.onFilterChanged(filter);\r\n        setSubmitting(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{ term: '', friend: 'null' }}\r\n                validate={usersSearchFormValidate}\r\n                onSubmit={submit}\r\n            >\r\n                {({isSubmitting}) => (\r\n                    <Form>\r\n                        <Field name=\"term\" type=\"text\" />\r\n                        <Field name=\"friend\" as=\"select\">\r\n                            <option value=\"null\">All</option>\r\n                            <option value=\"true\">Only followed</option>\r\n                            <option value=\"false\">Only unfollowed</option>\r\n                        </Field>\r\n                        <button type=\"submit\" disabled={isSubmitting}>Find</button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default UsersSearchForm;","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n    return items.map((user: any) => {\r\n        if (user[objPropName] === itemId.userId) {\r\n            return {...user, ...newObjProps}\r\n        }\r\n        return user;\r\n    })\r\n};","import {APIResponseType, usersAPI} from \"../api/api\";\r\nimport {updateObjectInArray} from \"../utils/object-helpers\";\r\nimport {UserType} from \"../types/types\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport { Dispatch } from \"redux\";\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>, // array of users ids\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialState => {\r\n    switch (action.type) {\r\n        case \"SN/USERS/FOLLOW\": {\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {follow: true} )\r\n                // users: state.users.map( user => {\r\n                //     if (user.id === action.userId) {\r\n                //         return {\r\n                //             ...user,\r\n                //             followed: true\r\n                //         }\r\n                //     }\r\n                //     return user;\r\n                // }),\r\n            }\r\n        }\r\n\r\n        case \"SN/USERS/UNFOLLOW\": {\r\n            return  {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {follow: false} )\r\n            };\r\n        }\r\n\r\n        case \"SN/USERS/SET_USERS\": {\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        }\r\n\r\n        case \"SN/USERS/SET_CURRENT_PAGE\": {\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        }\r\n\r\n        case \"SN/USERS/SET_TOTAL_USERS_COUNT\": {\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.count\r\n            }\r\n        }\r\n\r\n        case \"SN/USERS/TOGGLE_IS_FETCHING\": {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        }\r\n        case \"SN/USERS/SET_FILTER\": {\r\n            return {...state, filter: action.payload}\r\n        }\r\n        case \"SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS\": {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({\r\n        type: \"SN/USERS/FOLLOW\",\r\n        userId\r\n    } as const),\r\n\r\n    unfollowSuccess: (userId: number) => ({\r\n        type: \"SN/USERS/UNFOLLOW\",\r\n        userId\r\n    } as const),\r\n\r\n    setUsers: (users: Array<UserType>) => ({\r\n        type: \"SN/USERS/SET_USERS\",\r\n        users\r\n    } as const),\r\n\r\n    setCurrentPage: (currentPage: number) => ({\r\n        type: \"SN/USERS/SET_CURRENT_PAGE\",\r\n        currentPage\r\n    } as const),\r\n\r\n    setFilter: (filter: FilterType) => ({\r\n        type: \"SN/USERS/SET_FILTER\",\r\n        payload: filter\r\n    } as const),\r\n\r\n    setTotalUsersCount: (totalUsersCount: number) => ({\r\n        type: \"SN/USERS/SET_TOTAL_USERS_COUNT\",\r\n        count: totalUsersCount\r\n    } as const),\r\n\r\n    toggleIsFetching: (isFetching: boolean) => ({\r\n        type: \"SN/USERS/TOGGLE_IS_FETCHING\",\r\n        isFetching\r\n    } as const),\r\n\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\r\n        type: \"SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS\",\r\n        isFetching,\r\n        userId\r\n    } as const),\r\n};\r\n\r\n\r\nexport const requestUsers =\r\n    (page: number, pageSize: number, filter: FilterType): ThunkType =>\r\n    async (dispatch) => {\r\n    dispatch(actions.toggleIsFetching(true));\r\n    dispatch(actions.setCurrentPage(page));\r\n    dispatch(actions.setFilter(filter));\r\n\r\n    let response = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend);\r\n\r\n    dispatch(actions.toggleIsFetching(false));\r\n    dispatch(actions.setUsers(response.items));\r\n    dispatch(actions.setTotalUsersCount(response.totalCount));\r\n};\r\n\r\nconst _followUnfollowFlow = async (\r\n    dispatch: Dispatch<ActionsTypes>, userId: number, apiMethod: (userId: number) => Promise<APIResponseType>,\r\n    actionCreator: (userId: number) => ActionsTypes) => {\r\n\r\n    dispatch(actions.toggleFollowingProgress(true, userId));\r\n    let response = await apiMethod(userId);\r\n\r\n    if (response.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(actions.toggleFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => async (dispatch) => {\r\n    await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess);\r\n};\r\n\r\nexport const unfollow = (userId: number): ThunkType => async (dispatch) => {\r\n    await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess);\r\n};\r\n\r\nexport default usersReducer;\r\n\r\nexport type InitialState = typeof initialState;\r\nexport type FilterType = typeof initialState.filter;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsTypes>;","import React, {FC, useEffect} from \"react\";\r\nimport \"./users.css\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\nimport UsersSearchForm from \"./UsersSearchForm\";\r\nimport {FilterType, requestUsers} from \"../../redux/users-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getUsersFilter\r\n} from \"../../redux/users-selectors\";\r\n\r\n\r\nexport const Users: FC = () => {\r\n\r\n    const users = useSelector(getUsers);\r\n    const totalUsersCount = useSelector(getTotalUsersCount);\r\n    const currentPage = useSelector(getCurrentPage);\r\n    const pageSize = useSelector(getPageSize);\r\n    const filter = useSelector(getUsersFilter);\r\n    const followingInProgress = useSelector(getFollowingInProgress);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(requestUsers(pageNumber, pageSize, filter));\r\n    };\r\n\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter));\r\n    };\r\n\r\n    const follow = (userId: number) => {\r\n        dispatch(follow(userId));\r\n    };\r\n    const unfollow = (userId: number) => {\r\n        dispatch(unfollow(userId));\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(requestUsers(currentPage, pageSize, filter));\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <UsersSearchForm onFilterChanged={onFilterChanged} />\r\n            <Paginator currentPage={currentPage}\r\n                       onPageChanged={onPageChanged}\r\n                       totalItemsCount={totalUsersCount}\r\n                       pageSize={pageSize}/>\r\n            <div>\r\n                {users.map(user => (\r\n                    <User user={user}\r\n                         followingInProgress={followingInProgress}\r\n                         follow={follow}\r\n                         unfollow={unfollow}\r\n                         key={user.id}\r\n                     />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React, { FC } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport { getIsFetching, } from \"../../redux/users-selectors\";\r\nimport { Users } from \"./Users\";\r\n\r\ntype UsersPagePropsType = {\r\n    pageTitle: string,\r\n};\r\n\r\nconst UsersPage: FC<UsersPagePropsType> = (props) => {\r\n    const isFetching = useSelector(getIsFetching);\r\n\r\n    return (\r\n        <>\r\n            <h2>{props.pageTitle}</h2>\r\n            {isFetching ? <Preloader /> : null}\r\n            <Users />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default UsersPage;","import React, {FC} from \"react\"\r\nimport \"./header.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type MapPropsType = {\r\n    isAuth: boolean,\r\n    login: string | null,\r\n};\r\n\r\nexport type DispatchPropsType = {\r\n    logout: () => void,\r\n};\r\n\r\nconst Header: FC<MapPropsType & DispatchPropsType> = (props) => {\r\n    return (\r\n        <header className=\"header\">\r\n            <img className=\"logo\" src=\"https://image.neoseo.com.ua/image/catalog/foto_statti/topsovetovposozdanijubesplatnogologotipadljasajta/logo-design.png\" alt=\"Logo header\"/>\r\n            <div className=\"login-block\">\r\n                {props.isAuth\r\n                    ? <div>{props.login} - <button onClick={props.logout}>Log out</button></div>\r\n                    : <NavLink className=\"login-block__link\" to={\"/login\"}>Login</NavLink>\r\n                }\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import {authAPI, ResultCodeForCaptchaEnum, ResultCodesEnum, securityAPI} from '../api/api';\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\n\r\nlet initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null // if null , then captcha is not required\r\n};\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n\r\n        case \"SN/auth/SET_USER_DATA\":\r\n        case \"SN/auth/GET_CAPTCHA_URL_SUCCESS\": {\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth:boolean) => ({\r\n        type: \"SN/auth/SET_USER_DATA\",\r\n        payload: { userId,  email,  login,  isAuth }\r\n    } as const),\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\r\n        type: \"SN/auth/GET_CAPTCHA_URL_SUCCESS\",\r\n        payload: {captchaUrl}\r\n    } as const),\r\n}\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    let meData = await authAPI.me();\r\n\r\n    if(meData.resultCode === ResultCodesEnum.Success) {\r\n        let {id, email, login} = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true));\r\n    }\r\n};\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n    let data = await authAPI.login(email, password, rememberMe, captcha);\r\n\r\n    if(data.resultCode === ResultCodesEnum.Success) {\r\n        // success , get auth data\r\n        dispatch(getAuthUserData())\r\n    }  else {\r\n        if (data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl())\r\n        }\r\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n};\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    const data = await securityAPI.getCaptchaUrl();\r\n    const captchaUrl = data.data.url;\r\n\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl));\r\n};\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    let response = await authAPI.logout();\r\n\r\n    if(response.data.resultCode === 0 ) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false));\r\n    }\r\n};\r\n\r\nexport default authReducer;\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>;","import React, {Component} from \"react\"\r\nimport Header, {DispatchPropsType, MapPropsType} from \"./header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nclass HeaderContainer extends Component<MapPropsType & DispatchPropsType>{\r\n    render() {\r\n        return <Header {...this.props} />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n})\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, {}, AppStateType>\r\n(mapStateToProps, {logout})(HeaderContainer);","import {getAuthUserData} from \"./auth-reducer\";\r\nimport {InferActionsTypes} from \"./redux-store\";\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case \"SN/APP/INITIALIZED_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: \"SN/APP/INITIALIZED_SUCCESS\"} as const)\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n\r\n    /*когда купишь апи встатвить код\r\n    *  promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccess());\r\n        });\r\n    * */\r\n\r\n    promise.then(() => {\r\n        dispatch(actions.initializedSuccess());\r\n    });\r\n};\r\n\r\nexport default appReducer;","let initialState = {\r\n    sidebar: {},\r\n}\r\ntype InitialState = typeof initialState;\r\n\r\nconst sidebarReducer = (state = initialState, action: any): InitialState => {\r\n\r\n    return state;\r\n};\r\n\r\nexport default sidebarReducer;","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth : authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;\r\n\r\nexport type AppStateType = ReturnType<RootReducerType>;\r\n\r\nexport type InferActionsTypes<T> = T extends {[key: string]: (...args: any[]) => infer U} ? U : never;\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>;\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n// @ts-ignore\r\nwindow.__store__ = store;\r\n\r\nexport default store;","import React, {ComponentType, Suspense} from \"react\";\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return (\r\n            <Suspense fallback={<h1>Loading profile...</h1>}>\r\n                <WrappedComponent {...props}/>\r\n            </Suspense>\r\n            )\r\n    }\r\n}","import React, {FC} from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeys, Input} from \"../../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../../utils/Validators/validators\";\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string\r\n}\r\n\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>;\r\n\r\nconst LoginForm: FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({handleSubmit, error, captchaUrl}) => {\r\n   return (\r\n       <form onSubmit={handleSubmit}>\r\n           {createField<LoginFormValuesTypeKeys>(\"Email\", \"email\", [required], Input)}\r\n           {createField<LoginFormValuesTypeKeys>(\"Password\", \"password\", [required], Input, {type: \"password\"})}\r\n           {createField<LoginFormValuesTypeKeys>(undefined, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"remember me\")}\r\n           {captchaUrl && <img src={captchaUrl} alt={captchaUrl} /> }\r\n           {captchaUrl && createField<LoginFormValuesTypeKeys>(\"Symbols from image\", \"captcha\", [required], Input, {}) }\r\n           { error && <div className=\"form-summary-error\">\r\n               {error}\r\n           </div>}\r\n           <div>\r\n               <button>Login</button>\r\n           </div>\r\n       </form>\r\n   )\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm);\r\n\r\n\r\nexport default LoginReduxForm;","import React, {FC} from \"react\";\r\nimport \"./login.css\";\r\nimport LoginForm from \"./Sections/LoginForm\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { login } from \"../../redux/auth-reducer\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport { LoginFormValuesType } from \"./Sections/LoginForm\";\r\n\r\nexport const LoginPage: FC = () => {\r\n    const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl);\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha));\r\n    };\r\n\r\n    if (isAuth) {\r\n        return <Redirect to=\"/profile\" />\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>login</h1>\r\n            <LoginForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\r\n        </div>\r\n    )\r\n};","import React, {Component, ComponentType, FC, lazy} from \"react\";\nimport {\n    Switch,\n    Route, withRouter, BrowserRouter, Redirect\n} from 'react-router-dom';\nimport \"./App.css\";\nimport Menu from \"./components/Menu/menu\";\nimport UsersPage from \"./components/Users/UsersPage\";\nimport HeaderContainer from \"./components/Header/headerContainer\";\nimport {compose} from \"redux\";\nimport {connect, Provider} from \"react-redux\";\nimport {initializeApp} from \"./redux/app-reducer\";\nimport Preloader from \"./components/common/Preloader/Preloader\";\nimport store, {AppStateType} from \"./redux/redux-store\";\nimport {withSuspense} from \"./hoc/withSuspence\";\nimport { LoginPage } from \"./components/Login/LoginPage\";\n\nconst DialogsContainer = lazy(() => import('./components/Dialogs/dialogsContainer'));\nconst ProfileContainer = lazy(() => import('./components/Profile/profileContainer'));\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>;\ntype DispatchPropsType = {\n    initializeApp: () => void\n};\n\nconst SuspendedDialogs = withSuspense(DialogsContainer);\nconst SuspendedProfile = withSuspense(ProfileContainer);\n\nclass App extends Component<MapPropsType & DispatchPropsType> {\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n        alert(\"Some error occured \");\n    }\n    componentDidMount() {\n        this.props.initializeApp();\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors);\n    }\n\n    render() {\n\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        return (\n            <div className=\"app__wrapper\">\n                <HeaderContainer />\n                <Menu/>\n                <div className=\"app__wrapper_content\">\n                    <Switch>\n                        <Route exact path=\"/\">\n                            {() => <Redirect to=\"/profile\" />}\n                        </Route>\n                        <Route path=\"/dialogs\">\n                            <SuspendedDialogs />\n                        </Route>\n                        <Route path=\"/profile/:userId?\">\n                            <SuspendedProfile />\n                        </Route>\n                        <Route path=\"/users\">\n                            <UsersPage pageTitle=\"Page Title\" />\n                        </Route>\n                        <Route path=\"/login\">\n                            <LoginPage />\n                        </Route>\n                        <Route path=\"*\">\n                            <div>404 NOT FOUND</div>\n                        </Route>\n                    </Switch>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n    initialized: state.app.initialized\n});\n\nconst AppContainer =  compose<ComponentType>(\n    withRouter,\n    connect(mapStateToProps, {initializeApp}))(App);;\n\nconst SamuraiJSApp: FC = () => {\n    return <BrowserRouter>\n        <Provider store={store}>\n            <AppContainer />\n        </Provider>\n    </BrowserRouter>\n};\n\nexport default SamuraiJSApp;","import reportWebVitals from './reportWebVitals';\nimport ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport SamuraiJSApp from \"./App\";\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <SamuraiJSApp/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export type FieldValidatorType = (value: string) => string | undefined;\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n};","export default __webpack_public_path__ + \"static/media/preloader.3ad5b43f.svg\";","import React, {FC} from \"react\";\r\nimport preloader from \"../../../assets/images/preloader.svg\";\r\n\r\nconst Preloader: FC = () => {\r\n    return (\r\n        <div>\r\n            <img src={preloader} alt=\"Preloader\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Preloader;","import {profileAPI} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from 'redux-form';\r\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\n\r\nlet initialState = {\r\n    postsData: [\r\n        {\r\n            id: 1,\r\n            message: \"Hi, who are u?\",\r\n            likes: 12\r\n        },\r\n        {\r\n            id: 2,\r\n            message: \"Hi, who are u Doe?\",\r\n            likes: 1\r\n        },\r\n        {\r\n            id: 3,\r\n            message: \"Hi, who are John?\",\r\n            likes: 129\r\n        }\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n};\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/PROFILE/ADD_POST\": {\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likes: 0,\r\n            };\r\n            return {\r\n                ...state,\r\n                postsData: [...state.postsData, newPost],\r\n            }\r\n        }\r\n\r\n        case \"SN/PROFILE/SET_USER_PROFILE\": {\r\n            return  {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n        }\r\n\r\n        case \"SN/PROFILE/SET_STATUS\": {\r\n            return  {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        }\r\n\r\n        case \"SN/PROFILE/DELETE_POST\": {\r\n            return  {\r\n                ...state,\r\n                postsData: state.postsData.filter(p => p.id !== action.postId)\r\n            };\r\n        }\r\n\r\n        case \"SN/PROFILE/SAVE_PHOTO_SUCCESS\": {\r\n            return  {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos} as ProfileType\r\n            };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    addPostActionCreator: (newPostText: string) => ({\r\n        type: \"SN/PROFILE/ADD_POST\",\r\n        newPostText\r\n    } as const),\r\n    setUserProfile: (profile: ProfileType) => ({\r\n        type: \"SN/PROFILE/SET_USER_PROFILE\",\r\n        profile\r\n    } as const),\r\n\r\n    setStatus: (status: string) => ({\r\n        type: \"SN/PROFILE/SET_STATUS\",\r\n        status\r\n    } as const),\r\n\r\n    deletePost: (postId: number) => ({\r\n        type: \"SN/PROFILE/DELETE_POST\",\r\n        postId\r\n    } as const),\r\n\r\n    savePhotoSuccess: (photos: PhotosType) => ({\r\n        type: \"SN/PROFILE/SAVE_PHOTO_SUCCESS\",\r\n        photos\r\n    } as const),\r\n}\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getProfile(userId);\r\n\r\n    dispatch(actions.setUserProfile(data));\r\n};\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getStatus(userId);\r\n    dispatch(actions.setStatus(data));\r\n};\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        const data = await profileAPI.updateStatus(status);\r\n        if (data.resultCode === 0) dispatch(actions.setStatus(status));\r\n    } catch(error) {\r\n        console.log(error);\r\n    }\r\n};\r\n\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    const data = await  profileAPI.savePhoto(file);\r\n    if (data.resultCode === 0) dispatch(actions.savePhotoSuccess(data.data.photos));\r\n};\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId;\r\n    const data = await  profileAPI.saveProfile(profile);\r\n    if (data.resultCode === 0) {\r\n        if(userId != null) {\r\n            dispatch(getUserProfile(userId));\r\n        } else {\r\n            throw new Error(\"userId can't be null\");\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0] }));\r\n        // dispatch(stopSubmit(\"edit-profile\", {\"contacts\": {\"facebook\": response.data.message[0]} }));\r\n        return Promise.reject(data.messages[0]);\r\n    }\r\n};\r\n\r\nexport default profileReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>;"],"sourceRoot":""}